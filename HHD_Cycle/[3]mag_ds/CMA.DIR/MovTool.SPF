;# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
;# Cycle:     MovTool.SPF
;# Task:      Wz Bewegen
;# Version:   V06.00.07
;# Date:      16.09.2017 / Simons
;# Control:   840DSL Operate
;# TM:        Siemens/HHD
;# NBHSeries: 5-1000
;# Magazines: DDisk
;# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
;#
;------------------------------------
;
; Verlauf:
; --------
;
; V06.00.07 - 16.09.2017 / Simons
; - Wz geklemmt -> giMagState=.1 zu .2
; - bei _MOVEPOT giMagState=92 bzw.0
; - bei _DropTool giMagState=0
; - Formale Aenderungen
;
; V06.00.07 - 05.06.2017 / Simons
; - Neuversionierung
; - Einfuehrung MakeAlarmParam
;
; V06.00.06 - 21.04.2017 / Simons
; - Neuversionierung
; - gbHGWithBero hinzu
;
; V06.00.05 - 10.03.2017 / Simons
; - bFast hinzu
; - ChkSwitch entfernt
; - Voreilend HG Loesen
; - Formale Aenderungen
;
; V06.00.05 - 16.12.2016 / Simons
; - BERO_HG: 67... -> 66...
;
; V06.00.05 - 12.12.2016 / Simons
; - BERO im HG
;
; V06.00.05 - 02.10.2016 / Simons
; - Neuversionierung
; - OEM_...
; - Wz nicht Klemmen bei giMagState=11 und bToTC
;
; V06.00.04 - 04.09.2016 / Simons
; - Neuversionierung
; - Einfuehrung HHD TM
; - giNumPlacesInMag
;
; V04.00.00 - 06.03.2014 / Huettner
; - Vorlage
;
;------------------------------------
;
; Beschreibung:
; -------------
;
; Werkzeug bewegen in den Faellen:
;
; a) Werkzeug in Vorbereitungsposition bringen
;    iMagNo==9998 iPotNo==1
; b) Werkzeug ins Magazin zurueckbringen und ablegen
;    iMagNo<9998 iMagNo<>giMagNoLoadList iPotNo>0
; c) Werkzeug zur Handbeladung bringen
;    iMagNo=9999 iPotNo>0
; d) Werkzeug zur Bruchkontrolle bringen
;    iMagNo=9998 iPotNo=4
;
; Eingangsparameter:
; ------------------
; iToDo : Kennung fuer den Auftrag
; iTNo  : WzV-interne T-Nummer des zu bewegenden Wz
; iMagNo: Magazin-Nummer Ziel
; iPotNo: Platz-Nummer Ziel
;
; Rueckgabeparameter:
; -------------------
; iAlarmNo:     Alarmnummer
; sAlarmParam:  Zusatztext
;
; Achtung: das HG enthaelt bereits
; das zu bewegende (mittels iTNo angesprochene) Wz
;
;------------------------------------

PROC MovTool(INT iToDo, INT iTNo, INT iMagNo, INT iPotNo, VAR INT iAlarmNo, VAR STRING[32] sAlarmParam, BOOL bFast)

DEF STRING[32] sCycName="MovTool V06.00.07"
;
DEF BOOL bToTC, bToMag, bToBrk, bToLoad, bWithChip, bDDS, bHGAdvanceAllowed, bHGAdvanced, bHGClamped, bHGUnClamped, bHgInTcPos, bTlInHG, bDisk1InPassage, bDisk2InPassage, bPosDisk1, bPosDisk2
;
DEF INT iSrcG1X, iSrcG2X, iDstG1X, iDstG2X, iTmpFLog, iTNoChip, iFLogMax, iSrcFLog, iDstFLog, iActFLog, iChkRes, iActLane
;
DEF REAL rcRangeV=1.0, rSrcPosX, rSrcPosV1, rSrcPosV2, rDstPosX, rDstPosV1, rDstPosV2, rActPosX, rActPosV1, rActPosV2, rVeloX, rVeloV1, rVeloV2, rX1ClampDist, rX1Vmin

iAlarmNo=0 sAlarmParam="" bDDS=((giMagType B_AND 'H20')<>0) rX1ClampDist=grInchMetr*5.0 rX1Vmin=grInchMetr*4000

IF (giMagState==0)
  ;Magazinstatus herstellen
  GetMagSt
ENDIF

;Ueberpruefungen
;---------------
IF ((giMagState MOD 10)==0)
  iAlarmNo=AL_NoTlInHG
  GOTOF ENDE
ENDIF
;
IF (iTNo<=0)
  iAlarmNo=AL_TNoNotAllowed sAlarmParam=<<iTNo
  GOTOF ENDE
ENDIF
;
IF (iMagNo<1)OR((iMagNo>giNumRealMag)AND(iMagNo<>9998)AND(iMagNo<>9999))
  iAlarmNo=AL_InvalidCaNr sAlarmParam=<<iMagNo
  GOTOF ENDE
ENDIF
;
IF (iMagNo>=1)AND(iMagNo<=giNumRealMag)
  IF (iPotNo<1)OR(iPotNo>giNumPlacesInMag[iMagNo])
    iAlarmNo=AL_InvalidPlNr sAlarmParam=<<iPotNo
    GOTOF ENDE
  ENDIF
ENDIF
;
IF (giTNoHg>0)AND(giTNoHg<>iTNo)
  ;im HG ist ein Wz, aber nicht das gewuenschte
  MakeAlarmParam(sAlarmParam,$TC_TP2[giTNoHg],<<$TC_TP1[giTNoHg])
  iAlarmNo=AL_WrongTlInHG
  GOTOF ENDE
ENDIF

;Magazinstatus
;-------------
IF (bDDS)
  iFLogMax=4 rVeloX=$MA_POS_AX_VELO[mcAxX1] rVeloV1=360.0*$MA_POS_AX_VELO[mcAxV1] rVeloV2=360.0*$MA_POS_AX_VELO[mcAxV2] rActPosX=$AA_IM[mcAxX1] rActPosV1=$AA_IM[mcAxV1] rActPosV2=$AA_IM[mcAxV2] bDisk1InPassage=(mcbDBB_Disk1InPassage) bDisk2InPassage=(mcbDBB_Disk2InPassage)
  FINEA[mcAxX1] FINEA[mcAxV1] FINEA[mcAxV2]
ELSE
  iFLogMax=2 rVeloX=$MA_POS_AX_VELO[mcAxX1] rVeloV1=360.0*$MA_POS_AX_VELO[mcAxV1] rActPosX=$AA_IM[mcAxX1] rActPosV1=$AA_IM[mcAxV1] bDisk1InPassage=(mcbDBB_Disk1InPassage) bDisk2InPassage=FALSE
  FINEA[mcAxX1] FINEA[mcAxV1]
ENDIF
bWithChip=(mcbDBB_WithTlChipHG) bHGAdvanced=(mcbDBB_HGAdvanced) bHGClamped=(mcbDBB_HGClamped) bHGUnClamped=(mcbDBB_HGUnClamped) bHgInTcPos=(OUT_HgInTcPos) bTlInHG=(IN_ToolInHG)
;
IF (NOT bHGAdvanced)
  ;
  ;HG Vorfahren...
  bHGAdvanceAllowed=FALSE
  IF (ABS(rActPosX-grLaneX[2])<=grRange)OR(ABS(rActPosX-grLaneX[3])<=grRange)
    ;...in Gasse immer
    bHGAdvanceAllowed=TRUE
  ELSE
    ;sonst nur, wenn betroffene Scheibe(n) in Durchfahrposition(en)
    IF (rActPosX>=(grHgTcPrePosX-grRange))AND(rActPosX<(grLaneX[2]-grRange))AND(bDisk1InPassage)
      ;Scheibe 1
      bHGAdvanceAllowed=TRUE
    ENDIF
    IF (bDDS)AND(rActPosX>(grLaneX[2]+grRange))AND(bDisk2InPassage)
      ;Scheibe 2
      bHGAdvanceAllowed=TRUE
    ENDIF
  ENDIF
  ;
  IF (bHGAdvanceAllowed)
    ;
    IF (NOT bHGClamped)AND(giTNoHG>0)
      ;
      ;Wz im HG und darf vorfahren -> HG muss geklemmt sein
      M_HGClamp1
    ENDIF
    ;
    M_HgAdv1
    bHGAdvanced=(mcbDBB_HGAdvanced) bHGClamped=(mcbDBB_HGClamped) bHGUnClamped=(mcbDBB_HGUnClamped) bTlInHG=(IN_ToolInHG)
    ;
    ;HG mit Wz vorne in Fahrgasse
    giMagState=31
    ;
  ELSE
    iAlarmNo=AL_HgNotAdvanced
    GOTOF ENDE
  ENDIF
ENDIF

;Status: HG ist vorne

;Aufgabe Erkennen
bToMag=(iMagNo>=1)AND(iMagNo<=giNumRealMag)
bToTC=((iMagNo==9998)AND(iPotNo==1))
bToBrk=(iMagNo==9998)AND(iPotNo==4)AND(iToDo==mcTaskAS_BBK)
bToLoad=(iMagNo==9999)AND(iPotNo>0)

;Fahrlogik und Quell-/Zielpositionen bestimmen
iActFlog=0 iSrcFLog=giPlDatFLog[0] iDstFLog=giPlDatFLog[1]
IF (iSrcFLog>0)
  rSrcPosX=grPlDatPosX[0] rSrcPosV1=grPlDatPosV1[0] rSrcPosV2=grPlDatPosV2[0] iSrcG1X=giPlDatLane1X[0] iSrcG2X=giPlDatLane2X[0]
ENDIF
IF (iDstFLog>0)
  rDstPosX=grPlDatPosX[1] rDstPosV1=grPlDatPosV1[1] rDstPosV2=grPlDatPosV2[1] iDstG1X=giPlDatLane1X[1] iDstG2X=giPlDatLane2X[1]
ENDIF
IF (bToMag)AND(iDstFLog==0)AND(iSrcFLog>0)
  ;
  ;Keine Angabe von Zielfahrlogik aber Quellfahrlogik bekannt
  ;
  ;Zieldaten = Quelldaten
  rDstPosX=rSrcPosX rDstPosV1=rSrcPosV1 rDstPosV2=rSrcPosV2 iDstG1X=iSrcG1X iDstG2X=iSrcG2X iDstFLog=iSrcFLog iSrcFlog=0
ENDIF

IF (NOT bHGClamped)AND((iToDo<>mcTaskPrep2)OR(NOT bHgInTcPos)OR((NOT bToTC)AND(giMagState==11)))
  ;
  ;Keine Vorbereitung oder HG ist nicht in WzWPosition oder
  ;HG steht zum Leerfahren des DG mit geloestem Wz in WzWPosition bereit -> HG Spannen
  ;
  M_HgClamp1
  bHGClamped=(mcbDBB_HGClamped) bHGUnClamped=(mcbDBB_HGUnClamped) bTlInHG=(IN_ToolInHG)
ENDIF

IF (bHGClamped)AND((giMagState==11)OR(giMagState==81)OR(giMagState==91))
  ;
  ;HG geloest in ...position -> HG mit Wz geklemmt in ...position
  giMagState=giMagState+1
  ;
ENDIF

IF (gbHGWithBero)
  ;
  IF (giTNoHG>0)AND(bHGClamped)AND(NOT bTlInHG)
    ;Im HG sollte ein geklemmtes Wz sein, wird aber nicht erkannt
    iAlarmNo=AL_NoTlInHG
    GOTOF ENDE
  ENDIF
  ;
  IF (giTNoHG==0)AND(bTlInHG)
    ;HG sollte leer sein, es wird aber ein Wz erkannt
    iAlarmNo=AL_HGNotEmpty
    GOTOF ENDE
  ENDIF
ENDIF

;HG war schon bei Aufruf im geforderten Zustand
IF (bToTC)AND(bHgInTcPos)AND(giMagState==11) GOTOF ENDE

IF (bToMag)AND(bWithChip)
  ;
  ;Falls beim Transport ins Magazin der Chip geschrieben werden soll
  ;
  OEM_TlData(iTNo)
  ;
  IF (OEM_bSelChip)AND(giWaitRWChip<=0)AND((giOptCodeCarrier B_AND 'B100')<>0)
    ;Schreiben starten
    RWChip(2,iTNo,0,iAlarmNo,sAlarmParam,iTNoChip)
  ENDIF
ENDIF

IF (giMagState==12)OR(giMagState==21)OR(giMagState==22)
  ;
  ;HG im Bereich WzW/DG/BBK
  ;
  ;WzWposition anfahren/sicherstellen
  COARSEA[mcAxX1] FA[mcAxX1]=rVeloX POS[mcAxX1]=grHgTcPosX
  ;
  STOPRE
  ;HG mit Wz vorne in Fahrgasse
  giMagState=31 iActFLog=1 giActLaneX=1 rActPosX=grHgTcPosX
  ;
ENDIF

IF (giMagState==52)
  ;
  ;HG hinten im Bereich Beladen
  ;
  ;Beladeposition anfahren/sicherstellen
  COARSEA[mcAxX1] FA[mcAxX1]=rVeloX POS[mcAxX1]=grHgLoadPosX
  ;
  M_HgAdv1
  ;
  ;HG mit Wz vorne in Fahrgasse
  STOPRE
  IF (bDDS)
    giMagState=31 giActLaneX=3 rActPosX=grHgLoadPosX iActFlog=4
  ELSE
    giMagState=31 giActLaneX=2 rActPosX=grHgLoadPosX iActFlog=2
  ENDIF
  ;
ENDIF

IF (giMagState==82)OR(giMagState==83)
  ;
  ;HG in oder neben Quellplatz im Magazin
  ;
  giMagState=83 iTmpFLog=(iSrcFLog MOD 100) bPosDisk1=(((iTmpFLog==1)OR(iTmpFLog==2))AND(ABS(rActPosV1-rSrcPosV1)<=rcRangeV)) bPosDisk2=((bDDS)AND((iTmpFLog==3)OR(iTmpFLog==4))AND(ABS(rActPosV2-rSrcPosV2)<=rcRangeV))
  ;
  IF (bPosDisk1 OR bPosDisk2)
    ;
    ;auf Fahrgasse fahren/sicherstellen
    COARSEA[mcAxX1] FA[mcAxX1]=rVeloX POS[mcAxX1]=grLaneX[iSrcG1X]
    ;
    STOPRE
    ;HG mit Wz vorne in Fahrgasse zum Quellplatz
    giMagState=31 iActFLog=iTmpFLog giActLaneX=iSrcG1X rActPosX=grLaneX[iSrcG1X]
    ;
  ENDIF
ENDIF

IF (giMagState==31)
  ;
  ;HG mit Wz vorne in Fahrgasse
  ;
  ;aktuelle Fahrlogik ermitteln
  ;
  IF (bToMag)
    ;
    iTmpFLog=(iDstFLog MOD 100)
    IF (iTmpFLog>=1)AND(iTmpFLog<=iFLogMax)AND(giActLaneX==iDstG1X)
      ;
      ;HG schon auf gueltiger Zielfahrgasse
      ;
      iActFlog=iTmpFLog
      GOTOF _MOVE
    ENDIF
  ENDIF
  ;
  IF (ABS(rActPosX-grHgTcPosX)<=grRange)
    ;
    ;HG im Bereich TC
    ;
    iActFlog=1
    GOTOF _MOVE
  ENDIF
  ;
  IF (ABS(rActPosX-grHgLoadPosX)<=grRange)
    ;
    ;HG in Beladeposition
    ;
    iActFlog=iFLogMax
    GOTOF _MOVE
  ENDIF
  ;
  IF (ABS(rActPosX-grLaneX[2])<=grRange)
    ;
    ;HG in Fahrgasse
    ;
    iActFlog=2
    GOTOF _MOVE
  ENDIF
  ;
  bPosDisk1=((bDisk1InPassage)AND((rActPosX<grLaneX[2])OR(NOT bDDS))) bPosDisk2=((bDisk2InPassage)AND(rActPosX>grLaneX[2])AND(bDDS))
  IF (bPosDisk1 OR bPosDisk2)
    ;
    ;Scheiben sind in notwendiger Durchfahrposition
    ;
    ;HG Fahrgasse 2 anfahren
    COARSEA[mcAxX1] FA[mcAxX1]=rVeloX POS[mcAxX1]=grLaneX[2]
    iActFlog=2
    GOTOF _MOVE
  ENDIF
  ;
  IF (iActFlog==0)
    ;HG steht in ungueltiger Position
    iAlarmNo=AL_HGNotInValidPos
    GOTOF ENDE
  ENDIF
ENDIF

;=====
_MOVE:
;=====
;
IF ((bToTC)OR(bToBrk))AND(giMagState==31)
  ;
  ;HG vorne in Fahrgasse, Ziel ist der Doppelgreifer (WzWPosition)
  ;
  IF (NOT gbHGNoTapeCl)
    ;Kegelreiniger EIN
    WHEN (TRUE) DO M_TlTapeCleanOn0
  ENDIF
  ;
  GOTOF "_STARTTC"<<iActFlog

  ;=========
  _STARTTC4:
  ;=========
  ;Position ist Magazin 4 -> Scheibe 1/2 auf Durchfahrposition drehen
  COARSEA[mcAxV1] COARSEA[mcAxV2] FA[mcAxV1]=rVeloV1 FA[mcAxV2]=rVeloV2 POS[mcAxV1]=CDC(giDiskPosPassage) POS[mcAxV2]=CDC(giDiskPosPassage)
  GOTOF _TCPOS

  ;=========
  _STARTTC3:
  ;=========

  ;=========
  _STARTTC2:
  ;=========
  ;Position ist Magazin 2/3 -> Scheibe 1 auf Durchfahrposition drehen
  COARSEA[mcAxV1] FA[mcAxV1]=rVeloV1 POS[mcAxV1]=CDC(giDiskPosPassage)

  ;=========
  _STARTTC1:
  ;=========

  ;======
  _TCPOS:
  ;======
  IF (NOT gbDGIsNCAxis)AND(NOT bHGUnClamped)AND((NOT bWithChip)OR(giWaitRWChip<=0))
    WHEN (ABS($VA_IM[mcAxX1]-grHgTcPosX)<rX1ClampDist)AND(NOT mcbDBB_HGUnClamped)AND(SYG_IM[mcSYG_ErrIncCha2]==1)AND($VA_VACTM[mcAxX1]>rX1Vmin) DO M_HgUnclamp0
  ENDIF
  FINEA[mcAxX1] FA[mcAxX1]=rVeloX POS[mcAxX1]=grHgTcPosX M=QU(MQ_TlTapeCleanOff)
  ;
  STOPRE
  ;
  IF (bToTC)
    ;
    ;HG mit Werkzeug geklemmt in Werkzeugwechselposition
    giMagState=12 giActLaneX=1 rActPosX=grHgTcPosX
    ;
    ;HG im Doppelgreifer mit Wkz geklemmt
    ;
    IF (bWithChip)AND(giWaitRWChip>0)
      ;
      ;Warten auf Balluff
      RWChip(giWaitRWChip,iTNo,1,iAlarmNo,sAlarmParam,iTNoChip)
    ENDIF
    ;
    IF (NOT gbDGIsNCAxis)
      ;
      ;HG bereits loesen
      M=QU(MQ_HgUnclmpTl) M=QU(MQ_TlTapeCleanOff)
    ENDIF
    ;
    ;HG mit Werkzeug geloest in Werkzeugwechselposition
    giMagState=11
    ;
    GOTOF ENDE
  ENDIF

  IF (bToBrk)
    ;
    ;Kegelreiniger aus
    M=QU(MQ_TlTapeCleanOff)
    ;
    ;HG mit Werkzeug geklemmt in Position fuer Bohrerbruchkontrolle (WzW)
    giMagState=22 giActLaneX=1 rActPosX=grHgTcPosX
    ;
    GOTOF ENDE
  ENDIF
ENDIF

IF (bToLoad)AND(giMagState==31)
  ;
  ;HG vorne in Fahrgasse, Ziel ist der Beladeplatz im Magazin
  ;
  IF (NOT gbHGNoTapeCl)
    ;Kegelreiniger EIN
    WHEN (TRUE) DO M_TlTapeCleanOn0
  ENDIF
  ;
  GOTOF "_STARTLD"<<iActFlog

  ;=========
  _STARTLD1:
  ;=========
  ;Position ist WzW oder Magazin 1
  IF (bDDS)
    ;Scheibe 1+2 auf Durchfahrposition drehen
    COARSEA[mcAxV1] COARSEA[mcAxV2] FA[mcAxV1]=rVeloV1 FA[mcAxV2]=rVeloV2 POS[mcAxV1]=CDC(giDiskPosPassage) POS[mcAxV2]=CDC(giDiskPosPassage) ;Scheiben 1 und 2 auf Durchfahrposition drehen
    iActLane=3
  ELSE
    ;Scheibe 1 auf Durchfahrposition drehen
    COARSEA[mcAxV1] FA[mcAxV1]=rVeloV1 POS[mcAxV1]=CDC(giDiskPosPassage)
    iActLane=2
  ENDIF
  GOTOF _LOADPOS

  ;=========
  _STARTLD2:
  ;=========

  ;=========
  _STARTLD3:
  ;=========
  ;Position ist Magazin 2/3
  IF (bDDS)
    ;Scheibe 2 auf Durchfahrposition drehen
    COARSEA[mcAxV2] FA[mcAxV2]=rVeloV2 POS[mcAxV2]=CDC(giDiskPosPassage)
    iActLane=3
  ELSE
    iActLane=2
  ENDIF
  GOTOF _LOADPOS

  ;=========
  _STARTLD4:
  ;=========
  ;Position ist Beladen oder Magazin 4
  iActLane=3

  ;========
  _LOADPOS:
  ;========
  ;
  FINEA[mcAxX1] FA[mcAxX1]=rVeloX POS[mcAxX1]=grHgLoadPosX
  ;
  ;HG Zurueck und Kegelreiniger aus
  M_HgRet1 M_TlTapeCleanOff0
  ;
  STOPRE
  ;HG mit Werkzeug geklemmt in Werkzeugbeladeposition
  giMagState=52 giActLaneX=iActLane rActPosX=grHgLoadPosX
  ;
  GOTOF ENDE
ENDIF

IF (bToMag)
  ;
  ;Ziel ist ein Platz im Magazin
  ;a) altes SpWz: Spindel -> Magazin
  ;b) Umsetzen: Magazin -> Magazin
  ;c) Beladen: Beladestelle_Hand -> Magazin
  ;
  IF (giMagState==31)AND(iActFlog>=1)AND(iActFlog<=iFLogMax)
    ;
    ;HG vorne in Fahrgasse, Ziel ist Magazin
    ;
    IF (NOT gbHGNoTapeCl)
      ;
      ;Kegelreiniger EIN
      WHEN (TRUE) DO M_TlTapeCleanOn0
    ENDIF
    ;
    ;Status: HG vorne auf Fahrgasse
    ;
    iTmpFLog=(iDstFLog MOD 100)
    IF (iActFlog<>iTmpFLog)
      ;
      ;in Zielgasse fahren
      GOTOF "_STARTMAG"<<iActFlog

      ;=========
      _STARTMAG1:
      ;=========
      ;Position ist WzW oder Magazin 1
      IF (bDDS)AND(iTmpFLog>3)
        ;Ziel Magazin 4 -> beide Scheiben auf Durchfahrposition drehen
        COARSEA[mcAxV1] COARSEA[mcAxV2] FA[mcAxV1]=rVeloV1 FA[mcAxV2]=rVeloV2 POS[mcAxV1]=CDC(giDiskPosPassage) POS[mcAxV2]=CDC(giDiskPosPassage)
      ELSE
        ;sonst nur Scheibe 1 auf Durchfahrposition drehen
        COARSEA[mcAxV1] FA[mcAxV1]=rVeloV1 POS[mcAxV1]=CDC(giDiskPosPassage)
      ENDIF
      GOTOF _DEST

      ;=========
      _STARTMAG2:
      ;=========

      ;=========
      _STARTMAG3:
      ;=========
      ;Position ist Magazin 2/3
      IF (iTmpFLog<2)
        ;Ziel ist WzWposition -> Scheibe 1 auf Durchfahrposition
        COARSEA[mcAxV1] FA[mcAxV1]=rVeloV1 POS[mcAxV1]=CDC(giDiskPosPassage)
      ENDIF
      ;
      IF (bDDS)AND(iTmpFLog>3)
        ;Ziel ist Beladeposition oder Magazin 4 -> Scheibe 2 auf Durchfahrposition
        COARSEA[mcAxV2] FA[mcAxV2]=rVeloV2 POS[mcAxV2]=CDC(giDiskPosPassage)
      ENDIF
      GOTOF _DEST

      ;=========
      _STARTMAG4:
      ;=========
      ;Position ist Beladen oder Magazin 4
      IF (iTmpFLog<2)
        ;Ziel ist WzWPosition oder Magazin 1 -> Scheibe 1+2 auf Durchfahrposition
        COARSEA[mcAxV1] COARSEA[mcAxV2] FA[mcAxV1]=rVeloV1 FA[mcAxV2]=rVeloV2 POS[mcAxV1]=CDC(giDiskPosPassage) POS[mcAxV2]=CDC(giDiskPosPassage)
      ELSE
        ;sonst nur Scheibe 2 auf Durchfahrposition
        COARSEA[mcAxV2] FA[mcAxV2]=rVeloV2 POS[mcAxV2]=CDC(giDiskPosPassage)
      ENDIF
      GOTOF _DEST

      ;=====
      _DEST:
      ;=====
      COARSEA[mcAxX1] FA[mcAxX1]=rVeloX POS[mcAxX1]=grLaneX[iDstG1X]
      STOPRE
      iActFlog=iTmpFLog giActLaneX=iDstG1X rActPosX=grLaneX[iDstG1X]
    ENDIF
    ;
    ;HG vorne auf Zielfahrgasse
  ENDIF

  ;========
  _MOVEPOT:
  ;========
  ;
  IF (giMagState==93)OR((iActFlog==iTmpFLog)AND(iActFlog>0))
    ;
    IF (rActPosX<>grLaneX[iDstG1X])
      ;X auf Zielgasse fahren
      COARSEA[mcAxX1] FA[mcAxX1]=rVeloX POS[mcAxX1]=grLaneX[iDstG1X]
    ENDIF
    ;
    IF (iTmpFLog<=2)
      ;Scheibe 1 auf Zielplatz
      FINEA[mcAxV1] FA[mcAxV1]=rVeloV1 POS[mcAxV1]=rDstPosV1
    ELSE
      ;Scheibe 2 auf Zielplatz
      FINEA[mcAxV2] FA[mcAxV2]=rVeloV2 POS[mcAxV2]=rDstPosV2
    ENDIF
    ;
    STOPRE
    ;HG geklemmt vorne zwischen Zielmagazinplatz und Fahrgasse
    giMagState=93 giActLaneX=0
    ;
    IF ((NOT bWithChip)OR(giWaitRWChip==0))AND(iPotNo<>999)
      ;
      ;5mm vor Position Erreicht Loesen
      ;
      WHEN (ABS($VA_IM[mcAxX1]-rDstPosX)<rX1ClampDist)AND(NOT mcbDBB_HGUnClamped)AND(SYG_IM[mcSYG_ErrIncCha2]>0)AND($VA_VACTM[mcAxX1]>rX1Vmin) DO M_HgUnclamp0
    ENDIF
    FINEA[mcAxX1] FA[mcAxX1]=rVeloX POS[mcAxX1]=rDstPosX M=QU(MQ_TlTapeCleanOff)
    ;
    IF (mcbDBB_HGClamped)
      ;
      ;HG geklemmt vorne am Zielmagazinplatz
      giMagState=92
      ;
    ELSE
      giMagState=0
    ENDIF
    ;
    ;Werkzeug ablegen
    GOTOF _DropTool
  ENDIF
  ;
  ;HG geklemmt vorne an Zielmagazinplatz -> Wz Ablegen
  IF (giMagState==92) GOTOF _DropTool
  ;
ENDIF

iAlarmNo=AL_WayNotSpecified
GOTOF ENDE

;=========
_DropTool:
;=========
;
;Werkzeug auf Magazinplatz ablegen
;---------------------------------
;
IF (bWithChip)AND(giWaitRWChip>0)
  ;
  ;Warten auf Balluff
  RWChip(giWaitRWChip,iTNo,1,iAlarmNo,sAlarmParam,iTNoChip)
ENDIF
;
IF (NOT gbHGNoTapeCl)
  WHEN (TRUE) DO M_TlTapeCleanOff0
ENDIF
;
;HG geloest -> HG zurueckziehen
WHEN (mcbDBB_HGUnClampedSW) DO M_HgRet0
M_HgUnclamp1
;
giMagState=0
;
STOPRE
grSyncPickupDrop=ITOR(iTNo*100000)+iMagNo*1000+iPotNo
;
IF (IN_ReqStopAtCycleEnd)OR(giStepTeststop>=3)OR(NOT bFast)
  ;
  ;Warten bis HG zurueckgezogen ist
  M_HgRet1
  ;
  ;Prufen, ob HG leer  ist
  IF (gbHGWithBero)AND(IN_ToolInHG)
    iAlarmNo=AL_HGNotEmpty
  ENDIF
  ;
  ;Leeres HG hinten
  giMagState=30
  ;
ENDIF

;====
ENDE:
;====
;
IF (iAlarmNo>0)
  SETAL(iAlarmNo,sAlarmParam)
ENDIF
;
RET
