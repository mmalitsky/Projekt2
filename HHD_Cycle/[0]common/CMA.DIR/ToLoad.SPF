;# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
;# Cycle:     ToLoad.SPF
;# Task:      WZ ueber Sp Beladen
;#            (Beladestelle Hand)
;# Version:   V06.00.07
;# Date:      08.09.2017 / Simons
;# Control:   840DSL Operate
;# TM:        Siemens
;# NBHSeries: 5-1000
;# Magazines: All
;# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
;#
; -----------------------------------
;
; Verlauf:
; --------
;
; V06.00.07 - 08.09.2017 / Simons
; - grSyncPickUpDrop nur bei Scheibe zuruecksetzen
; - gbLastToBroken -> Beenden auch wenn HG noch belegt ist
;
; V06.00.07 - 24.08.2017 / Simons
; - Neuversionierung
; - Msgzeile Loeschen verlagert
; - Texte geaendert
;
; V06.00.07 - 05.06.2017 / Simons
; - Neuversionierung
; - Einfuehrung MakeAlarmParam
;
; V06.00.06 - 21.04.2017 / Simons
; - Neuversionierung
; - giSyncPickupDrop -> grSyncPickupDrop
; - OEM_TlData(..,x) -> OEM_TlData(..,mc..)
; - Fehlerdiagnose
; - Aktiv Kennung beim Wz Ablegen
;
; V06.00.05 - 20.01.2017 / Simons
; - Beim SP/HG Entladen Meldung SP/HG aufgetrennt
;
; V06.00.05 - 26.09.2016 / Simons
; - Neuversionierung
; - Berechnung Kopfposition
; - Ueberpruefung HG auf leer
;
; V06.00.04 - 03.08.2016 / Simons
; - Neuversionierung
; - Hinzu ID=SyncTCLoad ...
; - IF (iTNo==-1)...
;
; V06.00.03 - 4.07.2016 / Simons
; - Korrektur ..PutTlIntoMag,,,,mcState2WaitForEmptySp...
;
; V06.00.03 - 27.05.2016 / Simons
; - AL_TlDataChanged hinzu
; - Vorbereitung Wz Umspeichern im TMReset
;
; V06.00.02 - 18.04.2016 / Simons
; - Einfuehrung MsgBox
; - Gesperrtes Wz darf nicht Beladen werden
; - Einfuehrung TM HHD
; - Ueberpruefung Geodaten hinzu
; - giNumRealMag,giMagNoLoadList
;
; V06.00.02 - 16.10.2015 / Simons
; - keine Sonderfunktion fuer
;   Wz Messen mehr
; - Auftrennung von DG und Sp
;   beim Warten auf Leer
; - Messzylinder Gndst entfernt
; - keine Aktion mehr bei Scheibe
;   und Bohrerbruch - alles im TC_BS
;
; V06.00.01 - 21.07.2015 / Simons
; - Neuer Entladeversuch, wenn Wz
;   nicht entladen werden konnte
;
; V06.00.00 - 21.06.2015 / Simons
; - ProtoTyp
;
; -----------------------------------
;
; Beschreibung:
; -------------
; - mcTaskLoad
;   110=<Beladen ueber Beladestelle_Hand>
; - mcTaskAS_T0
;   501=Spindel leerfahren asynchron
;
; -----------------------------------

PROC ToLoad DISPLOF SBLOF

DEF STRING[32] sCycName="ToLoad V06.00.07" , sAlarmParam="", sName=""
;
DEF STRING[255] sAux
;
DEF BOOL bWrongTl=FALSE, bActMsg=FALSE, bLoadMag, bEnabled, bMagIsDDisk, bMagIsPickUpDisk, bWithHead, bIsNBH1200, bDGIsWM307, bMagIsMiksch, bMagIsChain, bMagIsWM307
;
DEF INT iAlarmNo=0 ,iFC8TaskId=1, iFC8TaskIdNo=1, iTNo, iNewMag, iNewLoc, iState, iChkRes, iMeasCutNo, iCount
;
DEF REAL rc0x001Deg=0.001, rActDiffHead, rTcSPosRes, rWait, rc0x1mm, rc0x5mm

;-1.0--TC Konfig-
; GndSt
;----------------
rWait=4*$MN_IPO_CYCLE_TIME rc0x1mm=0.1*grInchMetr rc0x5mm=0.5*grInchMetr bDGIsWM307=((giDGType B_AND 'B100')<>0) bMagIsChain=((giMagType B_AND 'B100')<>0) bMagIsPickUpDisk=((giMagType B_AND 'B1')<>0) bMagIsMiksch=((bMagIsChain)AND(NOT bDGIsWM307)) bMagIsWM307=((bMagIsChain)AND(bDGIsWM307)) bMagIsDDisk=((giMagType B_AND 'B10110000')<>0)
;
bWithHead=(gbSwivHeadExist)OR(gbTiltHeadExist) bIsNBH1200=((giMachType B_AND 'B1000000')<>0)

;-2.0--Spindel-
;--------------
rTcSPosRes=grTcSPos
IF (gbIsGearSpindle)
  IF ($AC_SGEAR[0]==2)
    rTcSPosRes=grTcSPosG2
  ENDIF
ENDIF

;-3.0--Inch/Metrisch-
;--------------------
IF ($MN_SCALING_SYSTEM_IS_METRIC==1)
  G71
ELSE
  G70
ENDIF

;-10.0--Auftrag-
;---------------
;
STOPRE
iTNo=$AC_TC_TNO  iNewMag=$AC_TC_MTN  iNewLoc=$AC_TC_LTN
;
;-10.1--Auftrag-
; Ueberpruefung
;---------------
;
IF (iTNo==-1)
  ;Ungueltiger Auftrag
  RET
ENDIF
;
IF (iTNo<=0)
  ;keins oder ungueltiges Wz
  iAlarmNo=AL_TNoNotAllowed sAlarmParam=<<iTNo
  GOTOF HandleAlarm
ENDIF
;
MsgBox(,,,,mcState2Clear)
;
MakeAlarmParam(sName,$TC_TP2[iTNo],<<$TC_TP1[iTNo])
;
TlData(iTNo)
IF (Tl_Locked)
  ;
  ;Wz gesperrt
  ;
  iAlarmNo=AL_SpTlBlockedNotFree67 sAlarmParam=sName
  GOTOF HandleAlarm
ENDIF
;
IF (iNewMag<=0)OR((iNewMag>giNumRealMag)AND(iNewMag<>9998))
  ;
  ;kein oder falsches Magazin
  iAlarmNo=AL_LocInvalid sAlarmParam="iNewMag="<<iNewMag
  GOTOF HandleAlarm
ENDIF
;
;-10.2--Auftrag-
; Ueberpruefung
;---------------
;
IF (NOT gbTMIsHHD)
  ;
  IF (gbToLoadFixColDat)
    ;
    ;Pruefe Kollisionsdaten zu Werkzeugtyp
    ;
    ChkMagType(1,iTNo,iChkRes)
  ELSE
    ;
    ;Pruefe Werkzeugtyp zu Kollisionsdaten
    ;
    ChkDim(1,iTNo,iChkRes)
  ENDIF
  ;
  CASE iChkRes OF 1 GOTOF _F1 -1 GOTOF _FN1 -2 GOTOF _FN2 -3 GOTOF _FN3 -4 GOTOF _FN4 DEFAULT GOTOF _NOERROR
  ;
  ;===
  _F1:
  ;===
  ;Wz Daten wurden von Chk... angepasst -> Abbruch und neu Beladen erforderlich
  iAlarmNo=AL_TlDataChanged sAlarmParam=sName
  GOTOF HandleAlarm
  ;
  ;====
  _FN1:
  ;====
  FileRead("TYPE_"<<$AN_LANGUAGE_ON_HMI,mcSysText,sAux,,,";")
  iAlarmNo=AL_InvalidToolData67 sAlarmParam="("<<sAux<<")"
  GOTOF HandleAlarm
  ;
  ;====
  _FN2:
  ;====
  FileRead("LENGTH_"<<$AN_LANGUAGE_ON_HMI,mcSysText,sAux,,,";")
  iAlarmNo=AL_InvalidToolData67 sAlarmParam="("<<sAux<<")"
  GOTOF HandleAlarm
  ;
  ;====
  _FN3:
  ;====
  FileRead("RADIUS_"<<$AN_LANGUAGE_ON_HMI,mcSysText,sAux,,,";")
  iAlarmNo=AL_InvalidToolData67 sAlarmParam="("<<sAux<<")"
  GOTOF HandleAlarm
  ;
  ;====
  _FN4:
  ;====
  iAlarmNo=AL_TlNotFound67 sAlarmParam=sName
  GOTOF HandleAlarm
  ;
  ;========
  _NOERROR:
  ;========
  ;  
  IF (grTCMinL1>0)
    ;
    ;Alle Schneiden muessen ein L1 > grTCMinL1 haben sonst besteht Crashgefahr
    ;
    iCount=0
    WHILE (iCount<$P_TOOLND[iTNo])
      iCount=iCount+1
      IF (ABS($TC_DP3[iTNo,iCount]+$TC_DP12[iTNo,iCount]+$TC_DP21[iTNo,iCount])<grTCMinL1)
        FileRead("LENGTH_"<<$AN_LANGUAGE_ON_HMI,mcSysText,sAux,,,";")
        MakeAlarmParam(sAlarmParam,sName,<<"D"<<iCount<<" ("<<sAux<<"<"<<grTCMinL1<<")",2)
        iAlarmNo=AL_InvalidToolData67
        GOTOF HandleAlarm
      ENDIF
    ENDWHILE
  ENDIF
ENDIF
;
;-10.3--Auftrag-
; Abbruchzeiger
;---------------
bLoadMag=(iNewMag>=1)AND(iNewMag<=giNumRealMag)
IF (bLoadMag)
  ;
  ;Ziel fuer Abbruchfall (2 Stellen MagNr, 3 Stellen PlNr)
  $TC_TPC10[iTNo]=ITOR((RTOI($TC_TPC10[iTNo] DIV 100000)*100000)+iNewMag*1000+iNewLoc)
ENDIF
;
;-10.4--Auftrag---------
; Belegung Aktualisieren
;-----------------------
giTNoSp=$TC_MPP6[9998,mcLocSp] giTNoDG1=0 giTNoDG2=0 giTNoHG=0
IF (gbWithDG)
  giTNoDG1=$TC_MPP6[9998,mcLocDG1] giTNoDG2=$TC_MPP6[9998,mcLocDG2]
ENDIF
IF (gbWithHG)
  giTNoHG=$TC_MPP6[9998,mcLocHG]
ENDIF

;-20.0--Pruefungen-
; DG
;------------------
IF (gbWithDG)
  ;
  IF (((giTNoDG1>0)OR(giTNoDG2>0))AND(NOT bMagIsMiksch))OR(((giTNoDG1>0)AND(giTNoDG2>0))AND(bMagIsMiksch))
    iAlarmNo=AL_DGNotEmpty
    GOTOF HandleAlarm
  ENDIF
  ;
  IF (NOT OUT_DGRotInBasePos)
    iAlarmNo=AL_DgNotInBasePos
    GOTOF HandleAlarm
  ENDIF
ENDIF
;
;-20.1--Pruefungen-
; SpWz Spannen
;------------------
IF (giTNoSp>0)AND(mcbDBB_SpClampedNoTl)
  ;lt. WzV Wz in Spindel, aber <Spindel gespannt ohne Werkzeug>
  iAlarmNo=AL_TInSpButSpClampedNoTool
  GOTOF HandleAlarm
ENDIF
;
IF NOT ((mcbDBB_SpClamped)OR(mcbDBB_SpClampedNoTl))
  ;weder <geklemmt mit Wz> noch <geklemmt ohne Wz>
  iAlarmNo=AL_SpNotClamped
  GOTOF HandleAlarm
ENDIF
;
;-20.2--Pruefungen------
; Schwenkkopf horizontal
;-----------------------
IF (bWithHead)
  ;
  IF (gbSwivHeadExist)
    rActDiffHead=($AA_IM[mcAxC]-grTCPosC)
  ENDIF
  ;
  IF (gbTiltHeadExist)
    rActDiffHead=($AA_IM[mcAxA]-grTCPosA)
  ENDIF
  ;
  IF (MINVAL(ABS(rActDiffHead),ABS(rActDiffHead-360))>rc0x001Deg)
    iAlarmNo=AL_HeadNotTcPos
    GOTOF HandleAlarm
  ENDIF
ENDIF
;
;-50.0--Ablauf----------
; Start mit SK "Beladen"
;-----------------------
;
;Beladen/Entladen ueber Beladestelle_Hand
OUT_LoadUnloadActive=TRUE
;
IF ((gbWithHG)AND(giTNoHG>0)AND(giTNoHG<>iTNo)AND(bLoadMag))OR((giTNoSp>0)AND(iTNo<>giTNoSp))
  ;
  ;Beladen auf Magazinplatz: Wz im HG/DG, falls es nicht das BeladeWz ist
  ;SP/HG async. Leerfahren:  Wz in Sp, falls es nicht das BeladeWz ist
  ; -> Wz'e Entladen
  ;
  IF (giTNoHG>0)
    MsgBox(T_LoadTl<<": T = "<<$TC_TP2[giTNoHG]<<"  "<<T_PutTlIntoMag,,,,mcState2WaitForEmptyHG)
  ENDIF
  ;
  IF (giTNoSp>0)  
    MsgBox(T_LoadTl<<": T = "<<$TC_TP2[giTNoSp]<<"  "<<T_PutTlIntoMag,,,,mcState2WaitForEmptySp)
  ENDIF
  ;
  TC_BS(mcTaskAS_T0,"0",0)
  ;
  OUT_LoadUnloadActive=TRUE
  ;
  ;-50.2--Ablauf----------------------------
  ; Ueberpruefung ob noch ein Wz in HG/DG/Sp
  ;-----------------------------------------
  ;
  MsgBox(MSG_WaitForEmptySp,"RESET ErrTime=2.0","(giTNoSp>0)AND(giTNoSp<>"<<iTNo<<")",,mcState2WaitForEmptySp)
  ;
  IF (gbWithHG)AND(bLoadMag)
    ;
    MsgBox(MSG_WaitForHGCleared,"RESET ErrTimeX=giMaxPrepTime","(giTNoHG>0)AND(giTNoHG<>"<<iTNo<<")",,mcState2WaitForEmptyHG)
  ENDIF
  ;
  IF (gbWithDG)
    MsgBox(MSG_WaitForDGCleared,"RESET ErrTimeX=giMaxPrepTime","(giTNoDG1<>0)OR(giTNoDG2<>0)",,mcState2WaitForEmptyDG)
  ENDIF
ENDIF
;
;-50.3--Ablauf-------------------
; Beladen ueber Beladestelle Hand
; Start mit SK Wz Beladen
;--------------------------------
IF (iTNo>0)AND(iTNo<>giTNoSp)
  ;
  MsgBox(T_LoadTl<<": T = "<<$TC_TP2[iTNo]<<"  "<<T_Started,"CLEAR",,,mcState2LoadingActive)
  ;
  IF (bIsNBH1200)
    ;
    WHEN (TRUE) DO M_CoolantOFF
    ;Kuehlmittel aus, aber ohne <WzW-Tuere oeffnen>
    G153 G0 G90 G40 G60 Z=grToLoadPosZ Y=grToLoadPosY SPOS=ACP(rTcSPosRes)
  ELSE
    ;
    ;SP an Beladestelle_Hand fahren
    ;
    IF ($AA_IM[mcAxX]>(grTcPrePosX+grPARA[2]))
      ;
      IF (NOT mcbDBB_TCDoorOpen)
        M_TcDoorOpen1
      ENDIF
      ;
      WHENEVER (NOT mcbDBB_TCDoorOpen) DO $AC_OVR=0
      ;
      D0 G153 G0 G90 G40 G602 X=grTcPrePosX ; Vorposition
    ENDIF
    ;
    ;WzW-Tuere schliessen
    WHEN ((grTcPrePosX+rc0x1mm)>$VA_IM[mcAxX]) DO M_TcDoorClose0 M5
    WHEN ((grTcPrePosX+rc0x1mm)>$VA_IM[mcAxX]) DO SPOS=ACP(rTcSPosRes)
    IF ($AA_IM[mcAxZ]<grTcPosZ)
      D0 G0 G153 G90 G40 G60 G603 X=grToLoadPosX Y=grToLoadPosY Z=grTcPosZ
    ELSE
      D0 G0 G153 G90 G40 G60 G603 X=grToLoadPosX Y=grToLoadPosY
    ENDIF
  ENDIF
  ;
  WHILE ($AA_STAT[mcAxSP1]<>4)
    ;solange Spindel nicht in Genauhalt-Fein
    STOPRE
  ENDWHILE
  WAITS
  ;
  ;Da SPCOF Wert von $AA_STAT[mcAxSP1] aendert (s.o.)
  ;
  STOPRE
  SPCOF
  ;
  IF (IN_TeststopReq)
    ;Teststop angefordert
    Teststop(1)
    STOPRE
  ENDIF
  ;
  IF (bIsNBH1200)
    ;
    WHILE(mcbDBB_TCDoorOpen)
      ;Warten bis WzW Tuer nicht mehr auf ist
      G4 F=rWait
      STOPRE
    ENDWHILE
  ENDIF
  ;
  ;-50.4--Ablauf-----------------------
  ; - Sp ist leer oder gespannt ohne Wz
  ; - in Beladestelle Hand
  ; - Aufforderung Wz in Sp
  ; -> Aufforderung Sp  Beladen&Spannen
  ;------------------------------------
  IF (NOT mcbDBB_SpClamped)
    ;
    IF (bMagIsPickUpDisk)
      giSyncTC=10 giNextTlInSp=iTNo grSyncPickupDrop=0
    ELSE
      giSyncTC=10 giNextTlInSp=iTNo
    ENDIF    	
    ;
    IF (gbPLCSimActive)
      ;
      ;Damit die PLC Simulation den passenden Spannstatus erzeugt
      CANCEL(SyncID_TCLoad)
      ID=SyncID_TCLoad EVERY (($A_DBB[0] B_AND 'B111')==0) DO OUT_ToolInSp=NOT OUT_ToolInSp
    ENDIF
    ;
    ;Sp nicht gespannt -> nach Quittierung von M286 sicherstellen,das SpWz gespannt ist
    MsgBox(T_LoadTl<<": T = "<<$TC_TP2[iTNo]<<"  "<<T_PutTlIntoSp,"ID=1 M286","(($A_DBB[0] B_AND 7)==1)",,mcState2PutToolInSp)
    ;
    CANCEL(SyncID_TCLoad)
    ;
    MsgBox(,,,,mcState2LoadingActive)
  ENDIF
  ;
  ;-50.5--Ablauf--------------------------------------
  ; - Spindel ist Beladen & Gespannt -> WzV Quittieren
  ;---------------------------------------------------
  IF (bLoadMag)
    iState=105
  ELSE
    iState=1
  ENDIF
  ;
  ToAckn(TRUE,iFC8TaskId,iFC8TaskIdNo,iTNo,iTNo,9998,mcLocSp,9999,1,iState)
  giSyncTC=0 giNextTlInSp=-1
ENDIF

;-60.0--Aktualisieren SpWz-
;--------------------------
giTNoSp=$TC_MPP6[9998,mcLocSp]

;-70.0--Ablegen ins Magazin-
;---------------------------
IF (giTNoSp>0)
  ;
  IF (bLoadMag)
    ;
    ;-70.1--Ablegen ins Magazin-
    ; Daten SpWz aktualisieren
    ;--------------------------
    TLData(giTNoSp,mcSetRelTl + mcResActiveTl + mcResLoadUnloadTl)
    ;
    OEM_TlData(giTNoSp,mcResTested)
    ;
    SpTlData(1,giTNoSp)
    ;
    MsgBox(T_LoadTl<<": T = "<<$TC_TP2[giTNoSp]<<"  "<<T_PutTlIntoMag,,,,mcState2MovingToolToMag)
    ;
    ;-70.2--Ablegen ins Magazin-
    ; Sp im Rahmen eines
    ; Beladevorganges Leerfahren
    ; und gegebenenfalls Pruefen
    ;---------------------------
    iTNo=giTNoSp
    ;
    TC_BS(mcTaskLoad,"0",0)
    ;
    ;<war im Einsatz> und <Aktiv> beim ehemaligen SpWz wieder zuruecksetzen
    TLData(iTNo,mcResActiveTl)
    ;
    ;-70.3--Ablegen ins Magazin-
    ; Sp muss leer sein
    ;---------------------------
    MsgBox(MSG_WaitForEmptySp,"RESET ErrTime=2.0","(giTNoSp<>0)",,mcState2WaitForEmptySp)
    ;
    IF (gbWithDG)
      ;
      ;-70.4--Ablegen ins Magazin------
      ; DG1/2 muessen leer (werden)sein
      ;--------------------------------
      giTNoDG1=$TC_MPP6[9998,mcLocDG1] giTNoDG2=$TC_MPP6[9998,mcLocDG2]
      ;
      MsgBox(MSG_WaitForDgCleared,"RESET ErrTimeX=giMaxPrepTime","(giTNoDG1<>0)OR(giTNoDG2<>0)",,mcState2WaitForEmptyDG)
    ENDIF
    ;
    IF (gbWithHG)
      ;
      ;-70.5--Ablegen ins Magazin-
      ; HG muss leer (werden)sein
      ;---------------------------
      giTNoHG=$TC_MPP6[9998,mcLocHG]
      ;
      MsgBox(MSG_WaitForHgCleared,"RESET ErrTimeX=giMaxPrepTime","(giTNoHG<>0)AND(NOT gbLastToBroken)",,mcState2WaitForEmptyHG)
    ENDIF
  ENDIF
ENDIF
;
;-70.6--Ablegen ins Magazin-
; Aktualisieren Sp Daten
;---------------------------
SpTlData(1,giTNoSp)
;
GOTOF FINISH

;===========
HandleAlarm:
;===========
;
;Abbruch an WzV
ToAckn(FALSE,iFC8TaskId,iFC8TaskIdNo,0,0,0,0,0,0,3)
;
;======
FINISH:
;======
;
OUT_LoadUnloadActive=FALSE
;
IF (iAlarmNo>0)
  MsgBox(<<iAlarmNo,"RESET",,sAlarmParam,mcState2Error)
ELSE
  MsgBox("",,,,mcState2Clear)
ENDIF
;
RET
