;# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
;# Cycle:     MovAsync.SPF
;# Task:      Asynchrones Umsetzen
;# Version:   V06.00.07
;# Date:      20.08.2017 / Simons
;# Control:   840DSL Operate
;# TM:        Siemens
;# NBHSeries: 5-1200
;# Magazines: All
;# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
;#
;------------------------------------
;
; Verlauf:
; --------
;
; V06.00.07 - 20.08.2017 / Simons
; - formale Aenderung
;
; V06.00.07 - 05.06.2017 / Simons
; - Neuversionierung
; - Einfuehrung MakeAlarmParam
;
; V06.00.06 - 17.04.2017 / Simons
; - Neuversionierung
; - formale Aenderungen
;
; V06.00.04 - 27.07.2016 / Simons
; - Neuversionierung
;
; V06.00.02 - 14.04.2016 / Simons
; - Zusammenfassung mit und ohne HG
; - giNumPlacesInMag,giNumRealMag
;
; V04.00.00 / 27.03.2014 / Huettner
; - Vorlage
;
;------------------------------------
;
; Beschreibung:
; -------------
;
; ASynchroner Auftrag...
; ... Kanal 1 -> Kanal 2
; ... Kanal 2 -> Kanal 2
; Wz asynchron umsetzen oder HG/DG Leerfahren
;
; Eingangsparameter:
;
; sTName:    Name des Werkzeuges
; iDuploNo:  Duplo-Nummer
; iNewMagNo: Zielcassette (im Magazin)
; iNewPlNo:  Zielplatz (in der o.g. Cassette)
; iErrReact: 0 = keine Alarme absetzen
;               (z.B. bei Batchbetrieb)
;            1 = Alarm absetzen
;
; Anwendungsfaelle:
;
; A)  sTName<>"0", iDuploNo>0 und (iNewMagNo/iNewPlNo) nennen einen Platz im Magazin(!):
;     Angegebenes Wz an den mit (iNewMagNo, iNewPlNo) spezif. Platz im Magazin bringen und dort ablegen
; B1) sTName=="0", iDuploNo==0 und (iNewMagNo/iNewPlNo)==(0/0):
;     HG leerfahren
; B2) sTName=="0", iDuploNo==0  und (iNewMagNo/iNewPlNo) nennen einen Platz im Magazin(!):
;     HG leerfahren und dann (leer) an den mit (iNewMagNo, iNewPlNo) spezif. Platz im Magazin fahren
; B3) sTName=="0", iDuploNo==0  und (iNewMagNo=9998/iNewPlNo beliebig):
;     HG leerfahren und dann (leer) in WzW-Punkt fahren
;
;------------------------------------

PROC MovASync(STRING[32] sTName, INT iDuploNo, INT iNewMagNo, INT iNewPlNo, INT iErrReact) DISPLOF

DEF STRING[32] sCycName="MovASync V06.00.07", sAlarmParam=""

DEF BOOL bMagIsMiksch, bDGIsWM307, bMagIsChain
;
DEF INT iAlarmNo=0, iTNoMove, iActMagNo, iActPlNo, iJobID, iTmpMagNo, iTmpLocNo, iTmpTNo, iPtr
;
DEF REAL rWaitShort

iPtr=iJobPtrASync rWaitShort=3*$MN_IPO_CYCLE_TIME bDGIsWM307=((giDGType B_AND 'B100')<>0) bMagIsChain=((giMagType B_AND 'B100')<>0) bMagIsMiksch=((bMagIsChain)AND(NOT bDGIsWM307))

IF (NOT $P_SUBPAR[1])
  iAlarmNo=AL_InvalidMissingInput sAlarmParam="sTName="<<sTName
  GOTOF HandleAlarm
ENDIF

IF (sTName=="0")OR(sTName=="")
  ;
  ;Leerfahren
  ;
  iTNoMove=0 iDuploNo=0
  IF NOT (($P_SUBPAR[3])AND($P_SUBPAR[4]))
    iNewMagNo=0 iNewPlNo=0
  ENDIF
ELSE
  ;
  ;Umsetzen
  ;
  IF NOT (($P_SUBPAR[2])AND($P_SUBPAR[3])AND($P_SUBPAR[4]))
    ;
    ;Falsche Parametrierung
    ;
    IF (NOT $P_SUBPAR[4])
      sAlarmParam="iNewPlNo="<<iNewPlNo
    ENDIF
    ;
    IF (NOT $P_SUBPAR[3])
      sAlarmParam="iNewMagNo="<<iNewMagNo
    ENDIF
    ;
    IF (NOT $P_SUBPAR[2])
      sAlarmParam="iDuploNo="<<iDuploNo
    ENDIF
    iAlarmNo=AL_InvalidMissingInput
    GOTOF HandleAlarm
  ENDIF
  ;
  ;Umzusetzendes Wz
  STOPRE
  iTNoMove=GETT(sTName,iDuploNo)
  ;
  IF (iTNoMove<=0)
    ;Wz existiert nicht
    MakeAlarmParam(sAlarmParam,sTName,<<iDuploNo)
    iAlarmNo=AL_TlNotFound
    GOTOF HandleAlarm
  ENDIF
ENDIF

IF (NOT $P_SUBPAR[5])
  iErrReact=1
ENDIF

;Plausibilitaetspruefung Ablageplatz
;
;Bestimmung der kleinsten, erlaubten Magazin-/Platznummer
IF (iTNoMove>0)
  ;
  ;Umsetzen nur im realen Magazin
  iTmpMagNo=1
ELSE
  ;
  ;Leerfahren Sp/HG/DG
  iTmpMagNo=0
ENDIF
;
IF (iNewMagNo<iTmpMagNo)OR(iNewMagNo>giNumRealMag)
  ;
  IF (iTNoMove>0)OR((iTNoMove==0)AND(iNewMagNo<>9998))
    ;kein erlaubtes Magazin
    iAlarmNo=AL_InvalidCaNr sAlarmParam=<<iNewMagNo
    GOTOF HandleAlarm
  ENDIF
  ;
  ;Leerfahren Sp/HG/DG
ELSE
  ;
  IF (iNewMagNo<>0)
    ;
    IF (iNewMagNo<=giNumRealMag)
      iTmpLocNo=giNumPlacesInMag[iNewMagNo]
    ELSE
      ;
      IF (iNewMagNo==giMagNoLoadList)AND(giMagNoLoadList>0)
        iAlarmNo=AL_LoadListNotTarget sAlarmParam=<<iNewMagNo
        GOTOF HandleAlarm
      ENDIF
      ;
      iTmpLocNo=$TC_MAP6[iNewMagNo]*$TC_MAP7[iNewMagNo]
    ENDIF
    ;
    IF (iNewPlNo<iTmpMagNo)OR(iNewPlNo>iTmpLocNo)
      ;unzulaessige Magazinplatznummer
      iAlarmNo=AL_InvalidPlNr sAlarmParam=<<iNewPlNo
      GOTOF HandleAlarm
    ENDIF
  ENDIF
ENDIF
;
WHILE($A_DBW[iPtr+2]==1)
  ;
  ;Wenn ein Auftrag ansteht, solange warten, bis er in Angriff genommen worden ist
  ;
  G4 F=rWaitShort
ENDWHILE

;Bestimmung des aktuellen Wz Platzes des umszusetzenden Wz's:
IF (iTNoMove>0)
  ;Umsetzen
  iActMagNo=$A_TOOLMN[iTNoMove] iActPlNo=$A_TOOLMLN[iTNoMove]
ELSE
  ;Leerfahren
  iActMagNo=0 iActPlNo=0
ENDIF

;Auftrag an Kanal 2 definieren
IF (iTNoMove==0)AND(iNewMagNo==9998)AND(NOT gbWithHG)
  iJobID=mcTaskAS_T0
ELSE
  iJobID=mcTaskAS_Displace
ENDIF
;
;JobID--------------FctNo------------TNo---------------------Aktuelles Magazin--------Aktueller Platz----------Neues Magazin-------------Neuer Platz--------------Altes Wz:-QuellMagazin---QuellPlatz--------ZielMagazin-------ZielPlatz---------Fehlerreaktion----------
$A_DBW[iPtr]=iJobID $A_DBW[iPtr+4]=0 $A_DBW[iPtr+6]=iTNoMove $A_DBW[iPtr+8]=iActMagNo $A_DBW[iPtr+10]=iActPlNo $A_DBW[iPtr+12]=iNewMagNo $A_DBW[iPtr+14]=iNewPlNo $A_DBW[iPtr+16]=0         $A_DBW[iPtr+18]=0 $A_DBW[iPtr+20]=0 $A_DBW[iPtr+22]=0 $A_DBW[iPtr+24]=iErrReact
;
;AuftragsStatus (1=neuer Auftrag)
$A_DBW[iPtr+2]=1

; Nicht Warten, wenn Aufruf von MovASync im Kanal 2 oder Aufruf von MovASync im HOME-Prg
IF ($P_CHANNO==2)OR(OUT_RevCha1Active)OR(OUT_RevCha2Active) GOTOF ENDE

IF (bMagIsMiksch)OR(gbWithHG)OR(iTNoMove>0)
  ;
  IF (iTNoMove>0)
    ;
    ;Umsetzen
    ;
    iTmpMagNo=iNewMagNo iTmpLocNo=iNewPlNo iTmpTNo=iTNoMove
  ELSE
    ;
    ;Leerfahren
    ;
    iTmpMagNo=9998 iTmpTNo=0
    ;
    IF (gbWithHG)
      iTmpLocNo=mcLocHG
    ELSE
      ;
      IF (gbDG2MagSide)
        iTmpLocNo=mcLocDG2
      ELSE
        iTmpLocNo=mcLocDG1
      ENDIF
    ENDIF
  ENDIF
  ;
  WHILE ($TC_MPP6[iTmpMagNo,iTmpLocNo]<>iTmpTNo)
    ;
    ;Warten bis HG/DG/Sp leer ist
    ;
    G4 F=rWaitShort
    STOPRE
  ENDWHILE
  ;
ENDIF

;====
ENDE:
;====
;
RET

;===========
HandleAlarm:
;===========
;
IF (iAlarmNo>0)AND(iErrReact>0)
  SETAL(iAlarmNo,sAlarmParam)
ENDIF
;
RET
