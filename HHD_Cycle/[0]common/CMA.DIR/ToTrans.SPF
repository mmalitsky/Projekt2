;# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
;# Cycle:     ToTrans.SPF
;# Task:      WZ Transport Kanal 2
;# Version:   V06.00.07
;# Date:      16.09.2017 / Simons
;# Control:   840DSL Operate
;# TM:        Siemens
;# NBHSeries: 5-1200
;# Magazines: Cassette,DDisk,Chain
;# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
;#
;------------------------------------
;
; Verlauf:
; --------
;
; V06.00.07 - 16.09.2017 / Simons
; - Korrekturen im Bereich Wz Holen und Chipauswertung (wie HHDTM 04.02.02)
; - formale Aenderungen
;
; V06.00.07 - 21.08.2017 / Simons
; - Ablageort bei Kassette nicht aendern, wird von MovBlock erledigt
; - formale Aenderungen
;
; V06.00.07 - 03.06.2017 / Simons
; - Neuversionierung
; - Einfuehrung MakeAlarmParam
;
; V06.00.06 - 21.04.2017 / Simons
; - giSyncPickupDrop-> grSyncPickupDrop
; - TlData(...) hinzu
; - formale Aenderungen
;
; V06.00.05 - 13.03.2017 / Simons
; - Wz synchron Umspeichern nur ins Magazin
; - Diverse formale Aenderungen
;
; V06.00.05 - 13.12.2016 / Simons
; - Verlagerung Beladeplatz Merken
; - BERO im HG
;
; V06.00.05 - 07.10.2016 / Simons
; - Neuversionierung
; - TM HHD (V04.02.02 / Sept. 2016, Balles)
; - bDstIsMag eingefuehrt
; - HHD TM (V04.02.02 / Sept. 2016, Balles)
;
; V06.00.04 - 05.09.2016 / Simons
; - Neuversionierung
;
; V06.00.03 - 07.05.2016 / Simons
; - Zusammenfassung
; - Einfuehrung HHD TM
;
; V04.00.01 - 26.10.2015 / Fengler
; - Vorlage
;
; V04.00.00 - 08.02.2016 / Huettner
; - Vorlage
;------------------------------------
;
; Beschreibung:
; -------------
;
; Fuer Kanal 2:
; Transportauftrag fuer das Handhabegeraet
; - zuvor altes HG-Werkzeug an seinen Platz bringen/ablegen (-> leeres HG)
; - falls iTNo>0:  spezifiziertes Wz an gewuenschten Platz bringen
; - falls iTNo<=0: leeres HG an gewuenschten Platz bringen
;
; Eingangsparameter:
;-------------------
;
; iMode=
; 0 - Umsetzen <Standard>
; 1 - Umsetzen im Rahmen von <Beladen von Inputcassette>
; 2 - Umsetzen im Rahmen von <Entladen auf Inputcassette>
; 3 - Umsetzen im Rahmen von <Entladen auf Inputcassette> mit Schreiben von Balluff Chip
;
; iToDo= Auftragsnummer
; iDstMagNo,
; iDstPotNo = abhaengig von <iMode>: Mag-/Platznummer, wohin das Werkzeug
;             nach dem Lesen/Schreiben gebracht werden soll
; iErrReact = 0 - keine Alarme absetzen (z.B. bei Batchbetrieb) (Auswertung durch aufrufendes Programm)
;             1 - bei Fehler NC-Alarm ausloesen
;
; Rueckgabeparameter:
; -------------------
; iAlarmNo:     Alarmnummer
; sAlarmParam:  Zusatztext
;
; Wird angestossen durch ...
; ... Bediener ueber WzV, Softkey <Umsetzen>
; ... Bediener ueber Taster <Schublade beladen>, <Schublade entladen>
;
;------------------------------------

PROC ToTrans (INT iMode, INT iToDo, INT iTNo, INT iDstMagNo, INT iDstPotNo, INT iErrReact, VAR INT iAlarmNo, VAR STRING[32] sAlarmParam) SAVE DISPLOF

DEF STRING[32] sCycName="ToTrans V06.00.07"
;
DEF BOOL bMagIsMiksch, bMagIsOldCas, bDGIsWM307, bMagIsChain, bMagIsCas, bNearTcPoint, bSelChip, bWithChip, bDstIsMag
;
DEF INT iAlarmNoShown=0, iFC8TaskId, iFC8TaskIdNo, iActMagNo, iActPotNo, iSrcMagNo, iSrcPotNo
DEF INT rTmp0, rTmp1, iTmpMagNo, iTmpPotNo, iCount, iCassNo, iTransLoc, iTNoChip
;
DEF REAL rWaitShort

iAlarmNo=0 sAlarmParam="" iFC8TaskId=(iToDo DIV 100) iFC8TaskIdNo=(iFC8TaskId MOD 10) rWaitShort=4*$MN_IPO_CYCLE_TIME
;Konfiguration
bWithChip=(mcbDBB_WithTlChipHG) bDGIsWM307=((giDGType B_AND 'B100')<>0) bMagIsCas=((giMagType B_AND 'B1000000')<>0) bMagIsChain=((giMagType B_AND 'B100')<>0) bMagIsMiksch=((bMagIsChain)AND(NOT bDGIsWM307)) bMagIsOldCas=((bMagIsCas)AND(gbMagWithFixedGuide))

WHILE ($P_SEARCH)
  ;
  ;Warten auf Ende Satzsuchlauf
  ;
  STOPRE
  G04 F=rWaitShort
ENDWHILE

IF (NOT gbWithHG)AND(NOT bMagIsMiksch)
  ;
  ;Wz umsetzen nur bei Kassette oder Miksch Kette
  ;
  IF (iToDo<mcTaskASync)
    ;Vorher negativ quittieren
    ToAckn(FALSE,iFC8TaskId,iFC8TaskIdNo,iTNo,iTNo,0,0,0,0,3)
  ENDIF
  ;
  GOTOF ENDE
ENDIF

;Belegung Aktualisieren
giTNoSp=$TC_MPP6[9998,mcLocSp]
IF (gbWithDG)
  giTNoDg1=$TC_MPP6[9998,mcLocDG1] giTNoDg2=$TC_MPP6[9998,mcLocDG2] iTransLoc=mcLocDG1
ENDIF
IF (gbWithHG)
  giTNoHg=$TC_MPP6[9998,mcLocHG] iTransLoc=mcLocHG
ENDIF

;Plausibilitaetsueberpruefungen
IF (iTNo>0)
  ;
  IF ($P_TOOLEXIST[iTNo])
    ;
    iSrcMagNo=$A_TOOLMN[iTNo] iSrcPotNo=$A_TOOLMLN[iTNo]
    IF (iSrcMagNo==iDstMagNo)AND(iSrcPotNo==iDstPotNo)AND(iDstMagNo>0)AND(iDstPotNo>0)
      ;
      ;Wz ist schon auf Zielplatz
      ;
      IF (iToDo<mcTaskASync)
        ;
        ;positiv quittieren
        ToAckn(TRUE,iFC8TaskId,iFC8TaskIdNo,iTNo,iTNo,iDstMagNo,iDstPotNo,iDstMagNo,iDstPotNo,1)
      ENDIF
      ;
      GOTOF ENDE
    ENDIF
  ENDIF
  ;
  IF (bMagIsCas)AND(NOT gbTMIsHHD)
    ;
    ;TM HHD macht diese Betrachtungen vor Aufruf an Hand der Daten aus der Magazindatenbank
    ;
    IF (grMaxColLenDrawer>0)OR(grMaxColRadDrawer>0)
      ;
      ;Pruefen ob, Werkzeug fuer Schublade geeignet ist
      ;
      IF (iSrcMagNo==1)OR(iDstMagNo==1)
        ;
        ;KollisionsLaenge und Radius Lesen
        OEM_TlData(iTNo)
        ;
        IF (OEM_rColLen>grMaxColLenDrawer)OR(OEM_rColRad>grMaxColRadDrawer)
          MakeAlarmParam(sAlarmParam,$TC_TP2[iTNo],<<$TC_TP1[iTNo])
          iAlarmNo=AL_TlToBigForDrawer
          GOTOF HandleAlarm
        ENDIF
      ENDIF
    ENDIF
  ENDIF
ENDIF

IF (giMagState==0)
  ;Magazinstatus herstellen
  GetMagSt
ENDIF

;DG ist leer/horizontal oder umzusetzendes Werkzeug im DG

;mit  Wz: HG gespannt
;ohne Wz: HG geloest
;
;a) im Einlaufbereich: HG gehoben/horizontal
;b) ausserhalb: (auf oder ausserhalb Gasse X1) gesenkt/vertikal oder gehoben/horizontal
;
IF ((gbWithHG)AND(giTNoHg>0)AND(giTNoHg<>iTNo))OR((NOT gbWithHG)AND(gbWithDG)AND(((giTNoDG1>0)AND(giTNoDG1<>iTNo))OR((giTNoDG2>0)AND(giTNoDG2<>iTNo)AND(gbDG2MagSide))))
  ;
  ;(Falsches) Wz in HG/DG(auf Magazinseite) in Magazin ablegen
  ;
  PutTool
ENDIF

;Status: kein Werkzeug im HG/DG oder das umzusetzende Wz ist (bereits) im HG/DG

IF (iDstMagNo==giMagNoLoadList)AND(giMagNoLoadList>0)
  ;Zielplatz darf nicht die Beladeliste sein
  iAlarmNo=AL_LoadListNotTarget67 sAlarmParam=<<iDstMagNo
  GOTOF HandleAlarm
ENDIF

bDstIsMag=(iDstMagNo>=1)AND(iDstMagNo<=giNumRealMag)
;
IF (iTNo==0)
  ;
  ;Leeres HG/DG bereitstellen
  ;
  IF (bDstIsMag)OR(iDstMagNo==9998)
    ;
    ;Magazin oder WzWPosition anfahren
    ;
    IF (bDstIsMag)
      ;
      ;Platzdaten fuer anzufahrenden Platz
      GetPlDat(iDstMagNo,iDstPotNo,0,0)
    ENDIF
    ;
    ;Leeres HG an gewuenschte Platz fahren (evtl. auch WzW-Stelle)
    GetTool(FALSE, iToDo, iDstMagNo, iDstPotNo)
  ENDIF
  ;
  GOTOF ENDE
ENDIF

;Werkzeug Umsetzen
;-----------------
;
IF (NOT bDstIsMag)AND(iDstMagNo<>9999)
  ;
  ;weder ins Magazin noch auf den Beladeplatz
  iAlarmNo=AL_InvalidCaNr67 sAlarmParam=<<iDstMagNo
  GOTOF HandleAlarm
ENDIF
;
;Wz soll ins Magazin oder auf den Beladeplatz
;
;aktuellen Platz des umzusetzenden Werkzeugs in einem realen Magazin ermitteln
GetTlLoc(0, iTNo, iActMagNo, iActPotNo)
;
IF (iActMagNo<=0)OR(iActPotNo<=0)
  ;Wz ist keinem realen Teilmagazin zugeordnet
  MakeAlarmParam(sAlarmParam,$TC_TP2[iTNo],<<$TC_TP1[iTNo])
  iAlarmNo=AL_TlNotInMagazine67
  GOTOF HandleAlarm
ENDIF
;
IF (iActMagNo==9999)
  ;
  ;Aktuell ist das Wz auf einem Beladeplatz -> Ablehnen
  ;
  iAlarmNo=AL_MoveFromToDgSpNotAllowed
  GOTOF HandleAlarm
ENDIF
;
IF (iActMagNo==9998)AND(iActPotNo<>iTransLoc)
  ;
  ;Der Ort des Wz's ist nicht HG/DG1. -> Umzusetzendes Wz ist z.Zt. in Spindel oder DG2
  ;Beispiel:
  ;Umsetzauftrag + Wz-Anforderung (fast) zeitgleich, wobei Wz-Anforderung abgearbeitet wird
  ;-> Wz wandert in Spindel, altes SpWz wird abgelegt.
  ;Nach Ablegen des alten SpWz wird im Kanal 2 der Umsetzauftrag angegangen.
  ;Da das umzusetzende Wz in der Spindel ist, kann der Umsetzauftrag erst
  ;ausgefuehrt werden, wenn das SpWz im Rahmen eines Wz-Wechsels wieder ins
  ;Magazin zurueckgebracht worden ist
  ;
  MakeAlarmParam(sAlarmParam,$TC_TP2[iTNo],<<$TC_TP1[iTNo])
  iAlarmNo=AL_TlInSpDG67
  GOTOF HandleAlarm
ENDIF
;
IF (bDstIsMag)
  ;
  ;Sicherheitshalber Leerplatzpruefung fuer Zielplatz
  ;
  iTmpMagNo=iDstMagNo iTmpPotNo=iDstPotNo
  ;
  GetFreeLocHHD(iTmpMagNo,iTmpPotNo,iTNo)
  ;
  IF (iTmpMagNo<=0)OR(iTmpPotNo<=0)
    ;Leerplatz nicht geeignet oder nicht frei
    iAlarmNo=AL_TLocIsNotFree sAlarmParam=<<iDstMagNo<<"/"<<iDstPotNo
    GOTOF HandleAlarm
  ENDIF
  ;
  IF (iTmpMagNo>0)AND(iTmpMagNo==giMagNoLoadList)
    iAlarmNo=AL_LoadListNotTarget sAlarmParam=<<giMagNoLoadList
    GOTOF HandleAlarm
  ENDIF
ENDIF
;
;-----------------------------------------------------
;Hier beginnt der eigentliche Transport
;Wz ggf. holen, auf Zielplatz bringen und dort ablegen
;-----------------------------------------------------
;
;Zunaechst Quellplatzdaten ermitteln
IF (iActMagNo>=1)AND(iActMagNo<=giNumRealMag)
  ;
  ;Wz noch auf seinem Magazinplatz
  iSrcMagNo=iActMagNo iSrcPotNo=iActPotNo
ELSE
  ;
  ;Wz ist aktuell in einem Zwischenspeicher
  ;
  ;alten Wz-Platz auslesen und iSrcMagNo/iSrcPotNo zuweisen
  iSrcMagNo=0 iSrcPotNo=0
  GetTlLoc(1,iTNo,iSrcMagNo,iSrcPotNo)
ENDIF
;
IF (bDstIsMag)
  GetPlDat(iSrcMagNo,iSrcPotNo,iDstMagNo,iDstPotNo)
ELSE
  GetPlDat(iSrcMagNo,iSrcPotNo,0,0)
ENDIF
;
IF (bMagIsOldCas)
  ;
  ;beim alten Magazin (Baureihe nbh170ff) den Fall behandeln, dass es
  ;2 Z-Gassen gibt (z.B. Z1=170 bzw. Z1=200 bei Magazinen mit 1 Ruestplatz)
  ;
  IF (iSrcMagNo==1)AND(iDstMagNo>1)AND(bDstIsMag)
    ;
    ;von Schublade -> Kassette
    ;
    ;Zielgasse=Quellgasse
    giPlDatLane1Z[1]=giPlDatLane1Z[0]
  ENDIF
  ;
  IF (iDstMagNo==1)AND(iSrcMagNo>1)AND(iSrcMagNo<=giNumRealMag)
    ;
    ;von Kassette -> Schublade
    ;
    ;Quellgasse=Zielgasse
    giPlDatLane1Z[0]=giPlDatLane1Z[1]
  ENDIF
  ;
  IF (iSrcMagNo>1)AND(iDstMagNo>1)AND(iSrcMagNo<=giNumRealMag)AND(bDstInMag)
    ;
    ;Ziel- und Quellplatz in Kassette
    ;
    rTmp0=giPlDatLane1Z[0] rTmp1=giPlDatLane1Z[1]
    IF (rTmp0>0)AND(rTmp1>0)AND(rTmp0<>rTmp1)
      ;
      IF (grLaneZ[rTmp1]>=grLaneZ[rTmp0])
        ;Quellgasse=Zielgasse
        rTmp0=rTmp1
      ELSE
        ;Zielgasse=Quellgasse
        rTmp1=rTmp0
      ENDIF
      giPlDatLane1Z[0]=rTmp0 giPlDatLane1Z[1]=rTmp1
    ENDIF
  ENDIF
ENDIF
;
;Wz in HG/DG holen
;-----------------
OEM_TlData(iTNo)
;
IF (iActMagNo>=1)AND(iActMagNo<=giNumRealMag)
  ;
  ;Wz ist noch auf seinem Magazinplatz
  ;
  gbHGNoTapeCl=OEM_bSelHGNoTapeCl
  ;
  MakeAlarmParam(sAlarmParam,$TC_TP2[iTNo],<<$TC_TP1[iTNo])
  ;
  ;Wz-Platz anfahren und Wz greifen
  GetTool(FALSE, iTNo, iSrcMagNo, iSrcPotNo)
  ;
  ;WzV Abgleichen
  IF (iToDo<mcTaskASync)
    ;
    IF (iToDo==mcTaskPrep2)
      iTmpMagNo=-1 iTmpPotNo=-1
    ELSE
      iTmpMagNo=iSrcMagNo iTmpPotNo=iSrcPotNo
    ENDIF
    ToAckn(TRUE,giJobTaskId,giJobTaskIdNo,iTNo,iTNo,9998,iTransLoc,iTmpMagNo,iTmpPotNo,105)
  ELSE
    ;
    ;asychron umspeichern: Mag -> Hg/DG
    ToAckn(TRUE,5,2,iTNo,iTNo,9998,iTransLoc,iSrcMagNo,iSrcPotNo,1)
  ENDIF
  ;
  ;HG geklemmt vertikal gesenkt an Quellmagazinplatz/DG an Quellmagazinplatz
  giMagState=82 grSyncPickupDrop=0
  ;
ENDIF

IF (gbWithHG)
  ;
  giTNoHg=$TC_MPP6[9998,mcLocHG] gbHGBigTl=OEM_bBigTlHG gbHGHeavyTl=OEM_bHeavyTlHG gbHGNoTapeCl=OEM_bSelHGNoTapeCl bSelChip=OEM_bSelChip
ELSE
  IF (gbWithDG)
    giTNoDG1=$TC_MPP6[9998,mcLocDG1] giTNoDG2=$TC_MPP6[9998,mcLocDG2] bSelChip=OEM_bSelChip
  ENDIF
ENDIF

;Gefordertes Werkzeug iTNo ist im HG/DG

IF (bWithChip)AND(bSelChip)
  ;
  ;Wz mit Chip
  ;
  IF (iMode==0)AND(bMagIsCas)AND(iActMagNo==1)AND(iDstMagNo<>iActMagNo)
    ;
    ;Bei Kassettenmagazin mit Balluff Werkzeugdaten lesen, falls aktueller Platz auf Schublade
    ;
    ;Lesen
    RWChip(1,iTNo,0,iAlarmNo,sAlarmParam,iTNoChip)
    ;
    IF (giWaitRWChip>0)
      ;Warten bis gelesen
      RWChip(giWaitRWChip,iTNo,1,iAlarmNo,sAlarmParam,iTNoChip)
    ENDIF
    IF (iAlarmNo>0)
      ;
      IF (iToDo<mcTaskASync)
        ;
        ;negativ quittieren
        ToAckn(FALSE,iFC8TaskId,iFC8TaskIdNo,iTNo,iTNo,0,0,0,0,3)
      ENDIF
      ;
      ;Wz asynchron auf Platz ablegen + Umspeichern
      RWDropTool(mcTaskAS_Displace, iTNo, iActMagNo, iActPotNo, FALSE, iAlarmNo1, sAlarmParam1)
      ;
      ;verhindert erneutes ToAckn unter HandleAlarm
      iTNo=giTNoHg iToDo=mcTaskASync
      ;
      GOTOF HandleAlarm
    ENDIF
  ENDIF
  ;
  IF (iMode==3)AND((NOT bMagIsCas)OR((iDstMagNo==1)AND(iDstMagNo<>iActMagNo)))
    ;
    ;(Beim Transport) Chip schreiben - Bei Kassette nur bei Transport von Kassette auf Schublade
    ;
    IF ((giOptCodeCarrier B_AND 'B10')<>0)
      ;Schreiben mit Pruefen starten
      RWChip(4,iTNo,0,iAlarmNo,sAlarmParam,iTNoChip)
    ELSE
      ;Auf Schreiben Warten
      RWChip(2,iTNo,0,iAlarmNo,sAlarmParam,iTNoChip)
    ENDIF
  ENDIF
ENDIF

;Wz zum Zielplatz bringen
MovTool(iToDo,iTNo,iDstMagNo,iDstPotNo,iAlarmNo,sAlarmParam)

IF (bDstIsMag)
  ;
  ;WzV Abgleich
  ;
  IF (iToDo<mcTaskASync)
    ;
    IF (iToDo==mcTaskLoad)
      ;
      ;Ablegen des Wz's ins Magazin im Rahmen Beladestelle_Hand
      ;
      ;<Wz entladen> und <Wz beladen> zuruecksetzen
      TlData(iTNo,mcResLoadUnLoadTl)
    ENDIF
    ;
    ToAckn(TRUE,giJobTaskId,giJobTaskIdNo,iTNo,iTNo,iDstMagNo,iDstPotNo,9998,iTransLoc,1)
  ELSE
    ;
    ;asychron umspeichern: HG/DG->Mag
    ;
    ToAckn(TRUE,5,2,iTNo,iTNo,iDstMagNo,iDstPotNo,9998,iTransLoc,1)
  ENDIF
  ;
  ;Leeres HG vertikal gehoben+hinten, Scheibe/DG leer in Grundstellung
  giMagState=30 grSyncPickupDrop=0
  ;
  IF (NOT bMagIsCas)
    ;Ablageort merken, z.B. fuer spaeteres Wiederbeladen
    $TC_TPC9[iTNo]=(iDstMagNo*1000+iDstPotNo) $TC_TPC10[iTNo]=0
  ENDIF
ELSE
  ;
  ;Nur Beladeplatz anfahren, kein Ortswechsel
  ;
  STOPRE
ENDIF
;
IF ((iMode==2)OR(iMode==3))AND((giOptToolMgmt B_AND 'B1000')<>0)
  ;
  ;Umsetzen im Rahmen von <Entladen auf Inputcassette>
  ;
  OEM_TlData(iTNo,mcResMeasured_Tested)
ENDIF
;
;Belegung Aktualisieren
IF (gbWithHG)
  giTNoHg=$TC_MPP6[9998,mcLocHG] gbHGBigTl=FALSE gbHGHeavyTl=FALSE gbHGNoTapeCl=FALSE
ENDIF
IF (gbWithDG)
  giTNoDG1=$TC_MPP6[9998,mcLocDG1] giTNoDG2=$TC_MPP6[9998,mcLocDG2]
ENDIF
;
IF (iAlarmNo>0)
  ;MovTool, RWChip zeigen Alarme selbst an
  iAlarmNoShown=iAlarmNo
  GOTOF HandleAlarm
ENDIF

;====
ENDE:
;====
;
RET

;===========
HandleAlarm:
;===========
;
IF (iToDo<mcTaskASync)
  ;
  ;Synchroner Auftrag -> negativ quittieren
  ToAckn(FALSE,iFC8TaskId,iFC8TaskIdNo,iTNo,iTNo,0,0,0,0,3)
ENDIF
;
IF (iAlarmNo>0)AND(iAlarmNo<>iAlarmNoShown)AND(iErrReact>0)
  SETAL(iAlarmNo,sAlarmParam)
ENDIF
;
RET
