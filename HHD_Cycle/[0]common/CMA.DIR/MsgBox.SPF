;# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
;# Cycle:     MsgBox.SPF
;# Task:      Messagebox
;# Version:   V06.00.07
;# Date:      25.06.2017 / Simons
;# Control:   840DSL Operate
;# TM:        All
;# NBHSeries: 5 - 1200
;# Magazines: All
;# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

; Verlauf:
; --------
;
; V06.00.07 - 25.06.2017 / Simons
; - Einschraenkung bei Variablennamen
;
; V06.00.07 - 01.06.2017 / Simons
; - Neuversionierung
; - mit Simulation
;
; V06.00.06 - 21.04.2017 / Simons
; - Neuversionierung
; - formale Aenderungen
;
; V06.00.05 - 07.02.2017 / Simons
; - Einfuehrung mcSYG_ErrIncCha1/2/3
;
; V06.00.05 - 23.10.2016 / Simons
; - $A_DBB[485] -> kanalspezifisch SYG_IM[mcSYG_TC+3]
;
; V06.00.05 - 23.10.2016 / Simons
; - Neuversionierung
; - Wartenzeit auch nach Meldungsausgabe
;
; V06.00.04 - 02.09.2016 / Simons
; - Neuversionierung
; - geaendert FOR iCount=0 TO icMaxButton-1
; - $A_DBB[485] hinzu
;
; V06.00.03 - 22.05.2016 / Simons
; - Neuversionierung
; - HHD TM / iMsgTMHHD hinzu
; - ErrTimeX hinzu
;
; V06.00.00 - 07.12.2015 / Simons
; - ProtoTyp
;
;-------------------------------------
;
; Beschreibung:
; -------------
;
; Von aufrufendem Programm:
; -------------------------
;
; sCode - Tasten
; --------------
; BSTART - NC StartTaste   (.0)
; BQUIT  - LoeschTaste PLC (.1)
; BPLUS  - Hand Plus       (.2)
; BMINUS - Hand Minus      (.3)
; B4                       (.4)
; B5                       (.5)
; B6                       (.6)
; B7                       (.7)
;
; sCode - Anwahlen
; ----------------
; '-'         - Nur Msg Ausgabe, keine Kommunikation
;               mit PLC
; ALL         - Alle projektierten Tasten muessen
;               gleichzeitig betaetigt werden
; FIRST       - MsgBox kommt  (Default)
; CLEAR       - FMQ Ausloesen (Default)
; DELAY=..    - Meldungsausgabe, Warten auf Freigabe.
;               Weiterschalten erst, wenn auch diese
;               Zeit abgelaufen ist.
; LAST        - MsgBox geht   (Default)
; ERRTIME=..  - Ausgabe von Meldung/Alarm, wenn
;               die (Fehler)bedingung fuer die
;               angegebenen Zeit angestanden ist
; ERRTIMEX=.. - wie ERRTIME, kann mit OVR angehalten werden
; ID          - IdentNummer (Default = 0)
;               Waehlt die gewuenschten PLC-Reaktionen
;               an. (Meldungsunterdrueckung etc.)
; M...        - Ausgabe einer M-Funktion
;               mit Stoppreaktion (M0, etc.)
; RESET       - Wie WAIT, dient nur der
;               Verbesserung der Lesbarkeit
; WAIT        - Erforderlich, wenn nicht schon B..,
;               DELAY, ERRTIME programmiert wurde.
;               Ohne die genannten Anwahlen erfolgt
;               nur eine Meldungsausgabe mit
;               anschliessender Fortsetzung des
;               aufrufenden Programms
;
; sMsgText - Meldungstext
; -----------------------
; Bei Meldungen - TEXT
; Bei Alarmen   - AlarmNo (66000<=iAlarmNo<=67999)
;
; sCondition - Freigabebedingung
; ------------------------------
; Die Vorgabe erfolgt als Text im NC - Code.
;
; "OR:" am Anfang des Textes ->
; Sowohl das PLCErgebnis als auch die Erfuellung
; der im folgenden Text beschriebenen Freigabe-
; bedingung fuehrt zur Weiterschaltung.
;
; ACHTUNG: Im Text sind nur globale Variable erlaubt.
; Macros und Substitute fuer Zahlen (z.B. 'B1000', mcLocSp)
; koennen ebenfalls nicht im Text verwendet werden. Sollen
; trotzdem verwendet werden, so muessen sie mit dem
; restlichen Text verknuepft werden.
;
; "$A_DBB[0]=="<<'B10' an Stelle von "$A_DBB[0]=='B10'"
;
; sAlarmParam - Zusatztext bei der Alarmausgabe
; ---------------------------------------------
;
; iMsgTMHHD - Meldungsnummer der Bedienerfuehrung - HHD TM
; --------------------------------------------------------
;
; Schnittstellen:
; ---------------
;
; An aufrufendes Programm
; -----------------------
;
; Es wurde fuer die Freigabe eine Taste betaetigt
; -> gsMsgBoxResult=(siehe TastenCode)
;
; Die Freigabe erfolgte durch die Freigabebedingung
; -> gsMsgBoxResult="TRUE"
;
; Die Fehlerueberwachung hat angesprochen
; -> gsMsgBoxResult="ERROR"
;
; Zur PLC
; -------
;
; An PLC - mcToPLC:
; ------------------
;   .0 - .11
;       = IdentNummer (Defaultwert=1)
;   .12 = NN
;   .13 = FMQ Ausloesen
;   .14 = Abmelden
;   .15 = Aktiv/Anmelden
;
; Ergebnis von PLC - mcFromPLC
; -----------------------------
;   .0 = NC StartTaste
;   .1 = FehlerloeschTaste
;   .2 = Hand Plus
;   .3 = Hand Minus
;   .4 = ...
;   .5 = ...
;   .6 = ...
;   .7 = ...
;
; Beispiele:
;-----------
;
; Ausgabe einer Meldung
;----------------------
;
; Sofort weiter im aufrufenden Programm
; MsgBox(MSG_DoorNotOpen)
;
; Nur Ausgabe Meldungstext/HHD TM Msg
; MsgBox(MSG_WaitForEmptySp,"-",,,mcState2WaitForEmptySp)
;
; Nur HHD TM Msg
; MsgBox(,,,,mcState2WaitForEmptySp)
;
; Ausgabe eines Alarms
;---------------------
;
; Warten auf Abbruch mit NCRESET:
; MsgBox("67626","RESET")
;
; Warten auf eine Taste:
; MsgBox(MSG_PressNCStart,"BSTART")
;
; Warten auf alternative Tasten
;------------------------------
;
; Warten auf Plus oder Minus Tast,dann
; Verzweigung im aufrufenden Programm:
;-------------------------------------
; MsgBox(MSG_PressPlusOrMinus,"BPLUS BMINUS")
; IF (gsMsgBoxResult=="BPLUS")  GOTOF PLUS
; IF (gsMsgBoxResult=="BMINUS") GOTOF MINUS
;
; Warten auf gleichzeitig betaetigte Tasten:
; MsgBox(MSG_PressPlusOrMinus,"ALL BPLUS BMINUS")
;
; Warten im M0 auf NCStart:
; MsgBox(MSG_PressNCStart,"M0")
;------------------------------
;
; Identnummer an die PLC:
; MsgBox("67626","ID=2 RESET")
;
; Ausgabe eines Alarms mit Zusatztext:
;
; Achtung: bei Benutzung von Macros AL_... wird
;          eine Typumwandlung erforderlich
;
; MsgBox(<<AL_PrevTlBrokenAsk67,"BSTART",,"XYZ")
;
; Funktionsueberwachung:
;-----------------------
;
; Meldungsausgabe mit anschliessender Fehlerreaktion:
;----------------------------------------------------
;
; Wenn innerhalb der Wartezeit die Tuer zu ist,
; dann Fortsetzung des Programms, sonst Fehlermeldung
;
; MsgBox(MSG__DoorNotOpen,"ErrTime=10.0","(($A_DBB[2] B_AND 3)<>2)")
; IF gsMsgBoxResult=="ERROR" GOTOF FehlerReaktion
;
; Warten auf eine Bedingung mit der Moeglichkeit des Uebergehens:
;----------------------------------------------------------------
;
; Tuer wird geschlossen oder die BQUIT Taste wird betaetigt -> Fortsetzung des Programms.
; Wurde BQUIT betaetigt, erfolgt dort eine AbbruchReaktion.
;
; MsgBox(MSG_DoorNotOpen,"BQUIT","OR:(($A_DBB[2] B_AND 3)<>2)")
; IF gsMsgBoxResult=="BQUIT" GOTOF AbbruchReaktion
;
; Bedienerfuehrung:
;------------------
;
; Warten auf StartTaste, Anmelden
; MsgBox(MSG_PressNCSTART,"FIRST BSTART")
;
; Warten auf WzWTuer offen
; MsgBox(MSG_OpenDoor,"NEXT WAIT","(($A_DBB[2] B_AND 3)==1)")
;
; Warten auf Sp Geloest fuer mindestens 2s
; MsgBox(MSG_UnClmpSp,"NEXT DELAY=2.0","(($A_DBB[0] B_AND 3)==2)")
;
; Warten auf Sp Gespannt
; MsgBox(MSG_ClmpSp,"NEXT WAIT","(($A_DBB[0] B_AND 3)==1)")
;
; Warten auf WzWTuer geschlossen, Abmelden
; MsgBox(MSG_CloseDoor,"LAST WAIT","(($A_DBB[2] B_AND 3)==2)")
;
;-------------------------------------

PROC MsgBox(STRING[128] sMsgText, STRING[128] sCode, STRING[128] sCondition, STRING[32] sAlarmParam, INT iMsgTMHHD) DISPLOF SBLOF

DEFINE icMaxButton AS 8
DEFINE mcToPLC AS $A_DBW[84]
DEFINE mcFromPLC AS $A_DBB[86]

DEF STRING[32] sCycName="MsgBox V06.00.07", sMFct="", sAux, sArg1
;
DEF STRING[128] sArg, sNo, sCounter
DEF STRING[32] sButton[icMaxButton]
;
DEF BOOL bResultCondition=FALSE, bIsAlarm=FALSE, bWithFMQ=FALSE, bComes=FALSE, bGoes=FALSE, bIsM0=FALSE, bWithMFct=FALSE
DEF BOOL bMFctActive, bIsResetAlarm=FALSE, bErrorCheck=FALSE, bPlcAllResults=FALSE, bIsClear=FALSE, bIsNext=FALSE, bIsReset=FALSE, bErrorCheckNegativ=FALSE
DEF BOOL bEnabled, bResultPlc, bWithCondition, bPlcOrCondition, bWithPlcResult, bWithMsg, bArgIsString, bArgIsStringOrVar, bWithTMHHDMsg
;
DEF INT icErrTime=10, icStartButton=1, iPlcIdent=0, iPLCMask=0, iDelay=0, iCount, iAlarmNo=0, iPLCResult=0, iPos, iLen, iTmp, iCmdNo
;
DEF REAL rcWait=0.1, rcWaitFMQ=0.5, rNo

gsMsgBoxResult="" bWithTMHHDMsg=(($P_SUBPAR[5])AND(gbTMIsHHD))
;
;TastenCodes (Grossschreibung) NC StartTaste immer sButton[0]
sButton[0]="BSTART" sButton[1]="BQUIT" sButton[2]="BPLUS" sButton[3]="BMINUS" sButton[4]="B4" sButton[5]="B5" sButton[6]="B6" sButton[7]="B7" sCounter="iCount=iCount+1"
;
IF ($P_SUBPAR[2])
  ;
  IF (sCode=="-")OR((NOT $P_SUBPAR[1])AND(NOT $P_SUBPAR[2])AND(NOT $P_SUBPAR[3])AND(NOT $P_SUBPAR[4]))
    ;
    IF ($P_SUBPAR[1])
      ;
      MSG(sMsgText)
    ENDIF
    ;
    IF (bWithTMHHDMsg)
      ;
      giStateToMMC[1]=iMsgTMHHD
    ENDIF
    ;
    RET
  ENDIF
  ;
  sCode=TOUPPER(sCode) iLen=(STRLEN(sCode)-1) iPos=0 iCmdNo=0 bArgIsString=FALSE bArgIsStringOrVar=FALSE sNo="" rNo=0
  ;
  WHILE (iPos<=iLen)
    ;
    sAux=SUBSTR(sCode,iPos,1)
    IF (bArgIsStringOrVar)
      IF (sAux<>" ")
        sArg=sArg<<sAux
        IF iPos<iLen GOTOF NEXTCODE
      ENDIF
      ;
      IF ISVAR(sArg)
        ;
        IF (STRINGIS(sArg)==211) GOTOF VarError
        ;                    
        EXECSTRING("sArg=<<"<<sArg)
      ENDIF
      IF (NOT bArgIsString)
        sNo=sArg
      ENDIF
      bArgIsStringOrVar=FALSE
    ELSE
      IF (ISNUMBER(sAux)OR(sAux=="."))AND(iCmdNo>0)
        sNo=sNo<<sAux
        IF iPos<iLen GOTOF NEXTCODE
      ENDIF
    ENDIF
    ;
    ;Abfrage 1. Code
    IF (iCmdNo==0) GOTOF NEXTCODECHECK
    ;
    IF (sAux=="=")
      sArg="" bArgIsStringOrVar=TRUE
      GOTOF NEXTCODE
    ENDIF
    ;
    IF (NOT bArgIsString)
      IF (sNo<>"")
        IF ISNUMBER(sNo)
          rNo=NUMBER(sNo) sNo=""
        ELSE
          SETAL(AL_SyntaxError,"..."<<SUBSTR(sCode,iPos,10)<<"... {MSG_BOX}")
        ENDIF
      ELSE
        rNo=0
      ENDIF
    ENDIF
    ;
    IF (iCmdNo==1)
      sMFct="M"<<RTOI(rNo) bWithMFct=TRUE bIsM0=(sMFct=="M0")
      GOTOF NEXTCODECHECK
    ENDIF
    ;
    IF (iCmdNo==2)
      iDelay=RTOI(rNo/rcWait)
      GOTOF NEXTCODECHECK
    ENDIF
    ;
    IF (iCmdNo==3)
      iPLCIdent=RTOI(rNo)
      IF (iPlcIdent<0)OR(iPlcIdent>'HFFF')
        SETAL(Al_NotAvailable,"PlcIdent="<<iPlcIdent<<" (1...4095) {MSG_BOX}")
      ENDIF
      GOTOF NEXTCODECHECK
    ENDIF
    ;
    ;=============
    NEXTCODECHECK:
    ;=============
    ;
    iCmdNo=0 bArgIsString=FALSE bArgIsStringOrVar=FALSE sArg="" rNo=0
    ;
    IF (sAux==" ") GOTOF NEXTCODE
    ;
    IF (iPos==iLen) GOTOF NextCode
    ;
    IF (sAux=="A")
      ;
      IF (iLen>=iPos+2)
        ;
        IF (SUBSTR(sCode,iPos,3)=="ALL")
          bPlcAllResults=TRUE iPos=iPos+2
          GOTOF NEXTCODE
        ENDIF
      ENDIF
    ENDIF
    ;
    IF (sAux=="B")
      ;
      iCount=0
      ;
      ;==========
      NEXTBUTTON:
      ;==========
      ;
      iTmp=STRLEN(sButton[iCount])
      IF (iLen>=iPos+iTmp-1)
        IF (SUBSTR(sCode,iPos,iTmp)==sButton[iCount])
          iPlcMask=(iPlcMask B_OR RTOI(EXP(iCount*LN(2)))) iPos=iPos+iTmp-1
          GOTOF NEXTCODE
        ENDIF
      ENDIF
      ;
      ;Naechster Tastencode
      ;
      iCount=iCount+1
      IF (iCount<icMaxButton) GOTOB NEXTBUTTON
      ;
    ENDIF
    ;
    IF (sAux=="C")
      ;
      IF (iLen>=iPos+4)
        ;
        IF (SUBSTR(sCode,iPos,5)=="CLEAR")
          bIsClear=TRUE bWithFMQ=TRUE iPos=iPos+4
          GOTOF NEXTCODE
        ENDIF
      ENDIF
    ENDIF
    ;
    IF (sAux=="D")
      ;
      IF (iLen>=iPos+4)
        ;
        IF (SUBSTR(sCode,iPos,5)=="DELAY")
          iCmdNo=2 iPos=iPos+4
          GOTOF NEXTCODE
        ENDIF
      ENDIF
    ENDIF
    ;
    IF (sAux=="E")
      ;
      IF (iLen>=iPos+6)
        ;
        IF (SUBSTR(sCode,iPos,7)=="ERRTIME")
          ;
          iCmdNo=2 bErrorCheck=TRUE iPos=iPos+6
          IF (iLen>=iPos+1)
            ;
            IF (SUBSTR(sCode,iPos+1,1)=="X")
              ;
              ;Kanalspezifische Abhaengigkeit von Bewegungsfreigabe
              ;
              iPos=iPos+1
              IF ($P_CHANNO==1)
                sCounter="iCount=iCount+SYG_IM["<<mcSYG_ErrIncCha1<<"]"
              ENDIF
              ;
              IF ($P_CHANNO==2)              
                sCounter="iCount=iCount+SYG_IM["<<mcSYG_ErrIncCha2<<"]"
              ENDIF
              ;
              IF ($P_CHANNO==3)
                sCounter="iCount=iCount+SYG_IM["<<mcSYG_ErrIncCha3<<"]"
              ENDIF
            ENDIF
          ENDIF
          GOTOF NEXTCODE
        ENDIF
      ENDIF
    ENDIF
    ;
    IF (sAux=="F")
      ;
      IF (iLen>=iPos+4)
        ;
        IF (SUBSTR(sCode,iPos,5)=="FIRST")
          bComes=TRUE iPos=iPos+4
          GOTOF NEXTCODE
        ENDIF
      ENDIF
    ENDIF
    ;
    IF (sAux=="I")
      ;
      IF (iLen>=iPos+1)
        ;
        IF (SUBSTR(sCode,iPos,2)=="ID")
          iCmdNo=3 iPos=iPos+1
          GOTOF NEXTCODE
        ENDIF
      ENDIF
    ENDIF
    ;
    IF (sAux=="N")
      ;
      IF (iLen>=iPos+3)
        ;
        IF (SUBSTR(sCode,iPos,4)=="NEXT")
          bIsNext=TRUE iPos=iPos+3
          GOTOF NEXTCODE
        ENDIF
      ENDIF
    ENDIF
    ;
    IF (sAux=="L")
      ;
      IF (iLen>=iPos+3)
        ;
        IF (SUBSTR(sCode,iPos,4)=="LAST")
          bGoes=TRUE iPos=iPos+3
          GOTOF NEXTCODE
        ENDIF
      ENDIF
    ENDIF
    ;
    IF (sAux=="M")
      iCmdNo=1
      GOTOF NEXTCODE
    ENDIF
    ;
    IF (sAux=="R")
      ;
      IF (iLen>=iPos+4)
        ;
        IF (SUBSTR(sCode,iPos,5)=="RESET")
          bIsReset=TRUE iPos=iPos+4
          GOTOF NEXTCODE
        ENDIF
      ENDIF
    ENDIF
    ;
    IF (sAux=="W")
      ;
      IF (iLen>=iPos+3)
        ;
        IF (SUBSTR(sCode,iPos,4)=="WAIT")
          iPos=iPos+3
          GOTOF NEXTCODE
        ENDIF
      ENDIF
    ENDIF
    ;
    ; Syntaxfehler
    ;-------------
    SETAL(Al_SyntaxError,"..."<<SUBSTR(sCode,iCount,10)<<"... {MSG_BOX}")

    ;========
    VarError:
    ;========
    ;
    SETAL(Al_NotAvailable,"LUD "<<sArg)
    
    ;========
    NEXTCODE:
    ;========
    ;
    iPos=iPos+1
    ;
  ENDWHILE
  ;
ENDIF
;
bWithPlcResult=(iPLCMask<>0) bWithCondition=(sCondition<>"") bWithMsg=((sMsgText<>"")OR(bWithTMHHDMsg))
;
IF (NOT bComes)AND(NOT bGoes)AND(NOT bIsNext)
  ;
  ;Anmelden, Abmelden noch nicht besetzt -> Default alles anwaehlen
  bComes=TRUE bGoes=TRUE
ENDIF
;
IF (iPlcIdent>0)AND(NOT bComes)AND(NOT bGoes)
  ;
  SETAL(AL_NotAvailable,"ID=...")
ENDIF
;
IF (bWithMsg)
  ;
  IF ISNUMBER(sMsgText)
    ;
    ;Vorgabe ist numerisch -> ist Alarmnummer
    iAlarmNo=NUMBER(sMsgText) bIsAlarm=TRUE bWithTMHHDMsg=FALSE
  ENDIF
  ;
  IF (bIsAlarm)
    ;
    IF (iAlarmNo>67999)OR(iAlarmNo<66000)
      SETAL(Al_NotAvailable,"AlarmNo="<<iAlarmNo<<" (66000<=AlarmNo<=67999) {MSG_BOX}")
    ENDIF
    ;
    ;Resetpflichtiger Alarm
    bIsResetAlarm=(iAlarmNo>=66000)AND(iAlarmNo<67000)
  ENDIF
ENDIF
;
IF (bWithCondition)
  ;
  IF (STRLEN(sCondition)>3)
    ;
    IF (TOUPPER(SUBSTR(sCondition,0,3))=="OR:")
      sCondition=SUBSTR(sCondition,3) bPlcOrCondition=(bWithPlcResult)
    ENDIF
  ENDIF
ENDIF
;
IF (NOT bIsResetAlarm)AND(NOT $P_SIM)
  ;
  IF (bComes)
    iTmp='H8000'
  ELSE
    iTmp=0
  ENDIF
  ;
  IF (bWithFMQ)AND(NOT bErrorCheck)
    ;
    iTmp=(iTmp B_OR 'H2000')
  ENDIF
  ;
  ;Bei PLC anmelden
  mcToPLC=(iTmp B_OR iPlcIdent) mcFromPLC=0
  ;
  ;Warten auf PLC-Quittierung
  iCount=0
  WHILE (mcToPLC<>0)OR(mcFromPLC<>0)
    G04 F=rcWait
    iCount=iCount+1
    IF (iCount>icErrTime*10)
      SETAL(AL_WaitFor, "PLC_1 {MSG_BOX}")
    ENDIF
  ENDWHILE
  ;
  IF (bWithFMQ)
    ;
    ;Warten bis FMQ von PLC umgesetzt worden ist
    G04 F=rcWaitFMQ
    ;
    bWithFMQ=FALSE
  ENDIF
ENDIF
;
IF (bWithMsg)AND(NOT bErrorCheck)
  ;
  IF (bWithTMHHDMsg)
    ;
    giStateToMMC[1]=iMsgTMHHD
  ENDIF
  ;
  IF (bIsAlarm)
    ;
    IF (NOT bIsM0)
      ;
      ;Meldung/Alarm Ausgeben
      SETAL(iAlarmNo,sAlarmParam)
    ENDIF
  ELSE
    ;
    MSG(sMsgText)
  ENDIF
ENDIF
;
IF NOT((bWithPlcResult)OR(bWithCondition)OR(bErrorCheck)OR(bWithMFct))
  ;
  ;nur Ausgabe der Meldung eventuell Wartezeit
  ;
  IF (iDelay>0)
    G04 F=iDelay*rcWait
    STOPRE
  ENDIF
  ;
  RET
ENDIF
;
;Warten auf Quittierung
iCount=-1 bMFctActive=bWithMFct
REPEAT
  ;
  bResultPlc=FALSE
  ;
  IF (bWithMFct)
    ;
    IF (bMFctActive)
      ;
      bMFctActive=FALSE
      ;
      IF (bIsM0)
        ;
        IF (bIsAlarm)AND(NOT bIsResetAlarm)AND(NOT bErrorCheck)
          ;
          IF (bWithTMHHDMsg)
            ;
            giStateToMMC[1]=iMsgTMHHD
          ENDIF
          ;
          SETAL(iAlarmNo,sAlarmParam)
        ENDIF
      ENDIF
      ;
      EXECSTRING(sMFct)
      STOPRE
      ;
      ;Ergebnis = Starttaste und vorlaeufige Weiterschaltbedingung
      iPLCResult=icStartButton bResultCondition=TRUE
    ENDIF
  ELSE
    bResultCondition=FALSE
  ENDIF
  ;
  IF (bWithPlcResult)
    ;
    iPLCResult=(mcFromPLC B_AND iPLCMask) bResultPlc=(bPlcAllResults)AND(iPLCResult==iPlcMask)OR(NOT bPlcAllResults)AND(iPLCResult<>0)
  ENDIF
  ;
  IF(bWithCondition)
    ;
    ;aktuelle Freigabebedingung Abfragen
    STOPRE
    EXECSTRING("bResultCondition="<<sCondition)
  ENDIF
  ;
  IF (bWithPlcResult)AND(bWithCondition)
    ;
    IF (bPlcOrCondition)
      ;
      bEnabled=(bResultCondition)OR(bResultPlc)
    ELSE
      bEnabled=(bResultCondition)AND(bResultPlc)
    ENDIF
  ELSE
    ;
    IF (bWithPlcResult)
      ;
      bEnabled=(bResultPlc)
    ELSE
      bEnabled=(bResultCondition)
    ENDIF
  ENDIF
  ;
  IF (bEnabled)
    ;
    ;Zeit inkrementieren
    EXECSTRING(sCounter)
    ;Grenzwert erreicht -> weiterschalten
    bEnabled=(iCount>=iDelay)
    ;
    IF (bErrorCheck)AND(bEnabled)
      ;
      ;Fehlerbedingung war ueber die Ueberwachungszeit gegeben -> Fehlerereignis
      iPLCResult=0 bErrorCheckNegativ=TRUE
    ELSE
      ;Fehlerbedingung erfuellt   -> Warten
      ;Freigabebedingung erfuellt -> Weiter
    ENDIF
  ELSE
    ;
    iCount=-1 bMFctActive=bWithMFct
    ;
    IF (bErrorCheck)
      ;
      ;Fehlerbedingung ist nicht (mehr) gegeben -> Weiter
      bEnabled=TRUE
    ENDIF
  ENDIF
  ;
  IF (NOT bEnabled)
    G04 F=rcWait
  ENDIF
UNTIL (bEnabled)
;
IF (bGoes)
  iTmp='H4000'
ELSE
  iTmp=0
ENDIF
;
IF ((bComes)AND((bErrorCheck)OR(bIsAlarm)))OR((bGoes)AND(bIsAlarm)AND(NOT bErrorCheck))
  ;
  bWithFMQ=TRUE iTmp=(iTmp B_OR 'H2000')
ENDIF
;
IF (iTmp<>0)AND(NOT $P_SIM)
  ;
  mcToPLC=iTmp mcFromPLC=0
  ;
  ;Warten auf Rueckmeldung PLC
  iCount=0
  WHILE (mcToPLC<>0)
    G04 F=rcWait
    iCount=iCount+1
    IF (iCount>icErrTime)
      SETAL(AL_WaitFor, "PLC_2 {MSG_BOX}")
    ENDIF
  ENDWHILE
  ;
  IF (bWithFMQ)
    ;
    ;Warten bis FMQ von PLC umgesetzt worden ist
    G04 F=rcWaitFMQ
  ENDIF
ENDIF
;
IF (bWithMsg)
  ;
  IF (bErrorCheck)
    ;
    IF (bErrorCheckNegativ)
      ;
      gsMsgBoxResult="ERROR"
      ;
      ;Fehlerbedingungen sind erfuellt und Wartezeit abgelaufen -> jetzt erst Alarm oder Meldung ausgeben
      IF (bWithTMHHDMsg)
        ;
        giStateToMMC[1]=iMsgTMHHD
      ENDIF
      ;
      IF (bIsAlarm)
        ;
        IF (bIsReset)
          ;
          MSG("")
        ENDIF
        ;
        SETAL(iAlarmNo,sAlarmParam)
      ELSE
        MSG(sMsgText)
      ENDIF
      ;
      WHILE (bIsReset)
        ;
        ;Endlosschleife
        ;
        M0
        STOPRE
      ENDWHILE
    ENDIF
  ELSE
    ;
    ;Ohne Meldungsausgabe -> Abloeschen der Meldungen
    ;
    IF (NOT bIsAlarm)
      ;
      MSG("")
      ;
      IF (bWithTMHHDMsg)
        ;
        giStateToMMC[1]=0
      ENDIF
    ENDIF
  ENDIF
ENDIF
;
IF (iPLCResult<>0)
  ;
  ;Ergebnis fuer aufrufendes Programm
  ;
  FOR iCount=0 TO icMaxButton-1
    ;
    IF ((iPLCResult B_AND RTOI(EXP(iCount*LN(2))))<>0)
      ;
      ;niederwertigste Taste wird zum Ergebnis
      gsMsgBoxResult=sButton[iCount]
      RET
    ENDIF
  ENDFOR
ENDIF
;
IF (gsMsgBoxResult=="")
  ;
  ;Freigabebedingung erfuellt
  gsMsgBoxResult="TRUE"
ENDIF
;
RET
