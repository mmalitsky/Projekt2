;# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
;# Cycle:     ToChkMSC.SPF
;# Task:      BBK - MSC Typ BK9
;# Version:   V06.00.07
;# Date:      03.06.2017 / Simons
;# Control:   840DSL Operate
;# TM:        Siemens
;# NBHSeries: 5-1000
;# Magazines: All
;# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
;#
;------------------------------------
; Verlauf:
;
; V06.00.07 - 03.06.2017 / Simons
; - Neuversionierung
; - Einfuehrung MakeAlarmParam
;
; V06.00.06 - 02.05.2017 / Simons
; - Neuversionierung
; - TlData(...)
; - formale Aenderungen
;
; V06.00.04 - 02.09.2016 / Simons
; - Neuversionierung
; - ...AND(iToDo<>icMSCTeach) hinzu
; - CLEAR nur in Kanal 1
;
; V06.00.03 - 07.05.2016 / Simons
; - Aenderung Fehlerdiagnose
; - bSelMeasNoNewVal hinzu
; - Einfuehrung HHD TM
; - Korrektur Freigabebit 'HFFFD'
;
; V06.00.01 - 20.07.2015 / Simons
; - Bei Identifizierungsfehler
;   Wz Sperren. Da "falsches" Wz
;   in V06.00.001 direkt im TC zum
;   Bediener zurueckgebracht wird.
;
; V06.00.00 - 17.07.2015 / Simons
; - Prototype
;
; V04.00.00 - 20.01.2015 / Huettner
; - Erstversion
;
;----------------------------------
;
; Beschreibung:
;--------------
;
;                       |    |
;                       | Sp |
;     |--------(B)--------||
;     |                   || (D)
;     |
;    (A)
;     |
;     | (rcBaseAngle)       ^
; BBK o--------------------===
;     |\
;     | \
;     |  \
;     |(C)\
;     |    \
;     |     \
;     |      \\
;
; DrehPunkt BBK:
;---------------
; A = grTOBREAKPOSZ_MSC   - Abstand Z zur Sp Vorderkante [mm]
; B = grTOBREAKPOSX_MSC   - Abstand X/Y zur Sp Mitte     [mm]
; C = grTOBREAKOFFSET_MSC - Winkelabweichung bei "BBK Hinten"
;                           zur Sp Achse [Grad]
;
; D = grTOBREAKTOL_MSC    - zugelassene Abweichung [mm]
;                           daraus Berechnung des Toleranzwinkels
; rcBaseAngle             - Bezugswinkel [Grad]
; Messwertaufloesung (rcResolution) [Grad/Inkrement]
;
; Aufgabe:
;---------
;
; Das im Parameter iTNo uebergebene
; Werkzeug auf Bohrerbruch pruefen
; mit MSC Bohrerbruchkontrolle
; -----------------------------------
;
; Eingangsparameter:
;-------------------
; iToDo =  1(-1) - Wz Teachen
;          2(-2) - Wz Pruefen (Bruchkontrolle)
;          4     - Bohrerbruchkontrolle MSC Teachlauf
;          (negativ -> Aufruf im TC)
; iTNo  = interne T-Nummer des zu pruefenden Wz
;
; rPresetValue = Sollwert fuer Pruefung
;                (wird bei Aufruf im TC aus Wz Laengen errechnet)
; bShowError    = 0 - keine Alarme absetzen
;                     (z.B. bei Batchbetrieb)
;                     (Auswertung durch aufrufendes Programm)
;                 1 - bei Fehler NC-Alarm ausloesen
;
; Rueckgabeparameter:
;--------------------
; bIsBroken     0= Kein Werkzeugbruch erkannt
;               1= Werkzeugbruch erkannt
; iAlarmNo:     Alarmnummer
; sAlarmParam:  Zusatztext
;
; Wird angestossen durch ...
; - TC_BS   (Kanal 1)
; - ToBreak (Kanal 2)
;
; Anmerkung:
;-----------
; iToDo=1 bzw. 2 nur moeglich, wenn
; Mess-System vorher kalibriert wurde
;
;------------------------------------

PROC ToChkMSC(INT iToDo, INT iTNo, REAL rPresetValue, BOOL bShowError, VAR BOOL bIsBroken, VAR INT iAlarmNo, VAR STRING[32] sAlarmParam)

DEFINE mcbBBKRetracted AS (($A_DBB[3] B_AND 'B1')<>0)
DEFINE mcbBBKFinished  AS (($A_DBB[3] B_AND 'B100')<>0)

DEF STRING[32] sCycName="ToChkMSC V06.00.07", sMessageNo="", sClear="-", sName
;
DEF BOOL bDoTeach=FALSE, bDoCheck=FALSE, bDoMSCTeach=FALSE, bCalledInTC, bEnabled, bSelMeasNoNewVal, bTlMeasured
;
DEF INT icMeas=1, icCheck=2, icMSCTeach=4, iMeasValue, iMeasResult, iTol, iErrCount, iMeasCutNo, iMeasState, iMeasMode
;
DEF REAL rcErrTimeDefault=5, rcBaseAngle=90.0, rcResolution=0.01, rActDiff, rAngleHelp, rWaitShort, rTmp

iAlarmNo=0 sAlarmParam="" grProbVal=0 bIsBroken=FALSE rWaitShort=(2*$MN_IPO_CYCLE_TIME)

IF ($P_CHANNO==1)
  sClear="CLEAR"
ENDIF

IF (iTNo<=0)
  ; Kein Werkzeug angegeben
  iAlarmNo=AL_InvalidMissingInput
  GOTOF ENDE
ENDIF

;iToDo<0 -> Aufruf im TC, es wird keine Meldung ausgegeben, die Sollwerte werden aus Wz-Daten entnommen
;
bCalledInTC=(iToDo<0) iToDo=ABS(iToDo) iMeasCutNo=RTOI($TC_TPC2[iTNo]) 
;
MakeAlarmParam(sName,$TC_TP2[iTNo],<<$TC_TP1[iTNo])
;
IF (NOT bCalledInTC)
  ;
  ;Aufruf im Magazin
  ;
  IF (giMagState<>22)
    iAlarmNo=AL_HGNotInValidPos
    GOTOF ENDE
  ENDIF
ENDIF
;
IF (iMeasCutNo<=0)OR(iMeasCutNo>$P_TOOLND[iTNo])
  MakeAlarmParam(sAlarmParam,sName,"D"<<$P_TOOLND[iTNo]<<" (D="<<iMeasCutNo<<")",2)
  iAlarmNo=AL_TlMeasInvalidCutNo67 
  GOTOF ENDE
ENDIF
;
IF (gbTMIsHHD)
  rTmp=$TC_DPC3[iTNo,iMeasCutNo] iMeasMode=RTOI($TC_DPC1[iTNo,iMeasCutNo]) iMeasState=RTOI($TC_DPC2[iTNo,iMeasCutNo]) bSelMeasNoNewVal=((iMeasMode B_AND 'B100')<>0) bTlMeasured=((iMeasState B_AND 'H100')<>0)
ELSE
  rTmp=$TC_TPC3[iTNo] iMeasMode=RTOI($TC_TPC1[iTNo]) iMeasState=iMeasMode bSelMeasNoNewVal=((iMeasMode B_AND 'B100')<>0) bTlMeasured=((iMeasState B_AND 'B1000')<>0)
ENDIF
;
IF (rPresetValue==0.0)
  rPresetValue=rTmp
ENDIF
;
IF (rPresetValue<grMinMeasToolLen)AND(bSelMeasNoNewVal)
  ;
  ;zu kleiner Presetwert und <Keine neuen Messwerte> -> Ungueltiger Presetwert
  ;
  iAlarmNo=AL_TlPresetDataInvalid67 sAlarmParam=sName
  GOTOF ENDE
ENDIF
;
IF ((rPresetValue==0.0)OR(iToDo==icMeas)OR(NOT bTlMeasured))AND(NOT bSelMeasNoNewVal)AND(iToDo<>icMSCTeach)
  ;
  ;Sollwert aus den GeoDaten, Wz Teachen anfordern
  iToDo=icMeas rPresetValue=($TC_DP3[iTNo,iMeasCutNo]+$TC_DP12[iTNo,iMeasCutNo])
ENDIF
;
IF (rPresetValue<grMinMeasToolLen)
  ;
  ;zu kleiner Presetwert -> Wz kannn nicht vermessen werden
  ;
  iAlarmNo=AL_CheckLenInvalid67 sAlarmParam=sName
  GOTOF ENDE
ENDIF

;-------------------------
; Auftrags Identifizierung
;-------------------------
;
IF (iToDo==icMeas)
  ;
  ;Istwert Teachen
  ;
  bDoTeach=TRUE sMessageNo=MSG_TlTeachRunning
ELSE
  ;
  IF (iToDo==icMSCTeach)
    ;
    ;BBK Einmessen
    ;
    bDoMSCTeach=TRUE sMessageNo=MSG_TlMeasCheckRunning
  ELSE
    ;
    ;Pruefen (icCheck)
    ;
    bDoCheck=TRUE sMessageNo=MSG_TlCheckRunning
  ENDIF
ENDIF
;
IF (NOT bCalledInTC)
  MsgBox(sMessageNo<<" : T = "<<$TC_TP2[iTNo],sClear)
ENDIF

;- $A_DBW[28]=0 -> Sollwinkel fuer PLC
;- $A_DBD[20]=0 -> Messergebnis fuer spaeteren
;                  Vergleich gezielt abloeschen
$A_DBW[28]=0 $A_DBD[20]=0

;Vorgabewinkel fuer PLC
;
IF ((bDoMSCTeach)OR((bDoTeach)AND(rPresetValue==0.0)AND(NOT bTlMeasured)))
  ;
  ;Teachen
  ;
  ;max. Toleranzwinkel
  iTol=254 rAngleHelp=17900
ELSE
  ;
  ;Pruefen
  ;
  ;Errechnung des Toleranzwertes
  iTol = ROUND(10*ATAN2(grTOBREAKTOL_MSC,grTOBREAKPOSX_MSC))
  IF (iTol<=1)OR(iTol>=5)
    ;
    ;unzulaessiger Toleranzwert -> 2*0.1 Grad (empirischer Wert fuer kurze Fahne)
    iTol=2
  ENDIF
  ;
  ;Berechnung Vorgabewinkel fuer die BBK aus dem Sollwert
  rAngleHelp=(ATAN2((grTOBREAKPOSZ_MSC-rPresetValue),grTOBREAKPOSX_MSC)+rcBaseAngle-grTOBREAKOFFSET_MSC)/rcResolution
ENDIF
;
;Sollwerte an PLC
$A_DBW[26]=iTol $A_DBW[28]=ROUND(rAngleHelp)

;Pruefablauf
;
;BBK muss hinten sein
;
iErrCount=0
WHILE (NOT mcbBBKRetracted)
  iErrCount=iErrCount+1
  IF (iErrCount>rcErrTimeDefault)
    ;
    ;BBK nicht in Grundstellung
    ;
    iAlarmNo=AL_BreakCtrlNoBasePos sAlarmParam=" {1}" bShowError=TRUE
    GOTOF HandleAlarm
  ENDIF
ENDWHILE
;
;Pruefen Start
;
M_StartBreakCtrl0
;
;Warten auf Ende der Messung -> Aktuelles Messergebnis Lesen
;
;Die PLC uebertraegt das Messergebnis als getrennte Worte,um Datenkonsistenz zu erhalten.
;Messwert=$A_DBW[20] / Beurteilung=$A_DBW[22]
;
iErrCount=0
REPEAT
  iMeasValue=$A_DBW[20] iMeasResult=$A_DBW[22] bEnabled=(mcbBBKFinished)AND(iMeasResult>0)AND((iMeasResult==4)OR(iMeasValue>0))
  iErrCount=iErrCount+1
  IF (iErrCount>rcErrTimeDefault)
    ;
    ;Kein Messwert von PLC
    ;
    iAlarmNo=AL_NoMeasValueFromPLC sAlarmParam=" {1}"
    GOTOF ENDE
  ENDIF
UNTIL (bEnabled)

;Auswertung
;
IF (iMeasResult==4)
  ;
  ;Geraetedefekt
  ;
  iAlarmNo=AL_NoMeasValueFromPLC sAlarmParam=" {2}"
  GOTOF ENDE
ENDIF
;
;Messwert
grProbVal=(grTOBREAKPOSZ_MSC-grTOBREAKPOSX_MSC*TAN(iMeasValue*rcResolution-rcBaseAngle+grTOBREAKOFFSET_MSC))
;
IF (bDoCheck)
  ;
  ;Werkzeug pruefen
  ;
  IF (iMeasResult>1)
    ;
    ;Wz ist gebrochen
    bIsBroken=TRUE
    ;
    ;Wz lt. Messung laenger als im OEM-Datum vorgegeben oder falsche OEM-Vorgabe oder Geraetefehler
    ;
    IF (grProbVal>rPresetValue)
      ;
      ;WzLaenge fehlt/nicht gueltig oder Geraetefehler
      ;
      iAlarmNo=AL_LenOrCounterInvalid67 sAlarmParam=sName
      GOTOF ENDE
    ENDIF
    ;
    IF (grProbVal<=rPresetValue)AND(bCalledInTC)
      ;
      ;Wz lt. Messung kuerzer als im OEM-Datum vorgegeben (z.B. gebrochen)
      ;
      iAlarmNo=AL_TlOutOfRange67 sAlarmParam=sName
    ENDIF
  ELSE
    ;
    ;Pruefung war erfolgreich
  ENDIF
  ;
  GOTOF ENDE
ENDIF
;
IF (bDoTeach)
  ;
  ;Wz Laenge Lernen
  ;
  rActDiff=ABS(rPresetValue-grProbVal)
  ;
  IF (grToMeasTol>grMaxMeasTol)
    grToMeasTol=grMaxMeasTol
  ENDIF
  ;
  IF (grToMeasTol<grMinMeasTol)
    grToMeasTol=grMinMeasTol
  ENDIF
  ;
  ;Werkzeug soll gelernt werden und ...
  ;a) ... ist (lt. Status) noch nicht vermessen , d.h. erstmaliges Vermessen
  ;   oder
  ;b) ... ist (lt. Status) bereits vermessen und liegt innerhalb der Toleranz
  ;
  IF (iMeasResult==1)OR((NOT bTlMeasured)AND(rPresetValue==0.0))
    ;
    ;i.O. oder noch nicht vermessen
    IF (rActDiff>grToMeasTol)
      ;
      ;Wz ist gebrochen
      bIsBroken=TRUE
      ;
      ;Gemessene Werkzeuglaenge ausserhalb der Toleranz
      iAlarmNo=AL_TlOutOfRange67 sAlarmParam=sName
      GOTOF ENDE
    ELSE
      ;
      ;Gemessene Werkzeuglaenge innerhalb der Toleranz
      ;
      ;<Gesperrt> zuruecksetzen
      TlData(iTNo,mcResLockTl)
      ;
      IF (gbTMIsHHD)
        ;
        ;<Wz ist vermessen> setzen
        $TC_DPC2[iTNo,iMeasCutNo]=ITOR(iMeasState B_OR 'H100')
        ;
        IF (NOT bSelMeasNoNewVal)
          ;
          ;Wz sollte geteachet werden -> Sollwert = Messwert
          $TC_DPC3[iTNo,iMeasCutNo]=grProbVal
        ENDIF
      ELSE
        ;
        $TC_TPC1[iTNo]=ITOR(iMeasState B_OR 'B1000')
        IF (NOT bSelMeasNoNewVal)
          ;
          $TC_TPC3[iTNo]=grProbVal
        ENDIF
      ENDIF
    ENDIF
    ;
  ELSE
    ;
    ;Schneide ist vermessen und Toleranz ist ueberschritten
    ;
    bIsBroken=TRUE
    ;
    IF (grProbVal>rPresetValue)
      ;
      ;Wz lt. Messung laenger als im OEM-Datum vorgegeben
      ;oder Geraetefehler
      ;
      iAlarmNo=AL_LenOrCounterInvalid67 sAlarmParam=sName
      GOTOF ENDE
    ENDIF
    ;
    IF (grProbVal<=rPresetValue)
      ;
      ;ungueltige Vorgabe im OEM-Datum - WzLaenge fehlt/nicht gueltig
      ;
      iAlarmNo=AL_TlOutOfRange67 sAlarmParam=sName
    ENDIF
  ENDIF
ENDIF

;====
ENDE:
;====
;
IF (bIsBroken)
  ;
  ;<Wz ist vermessen> zuruecksetzen
  IF (gbTMIsHHD)
    $TC_DPC2[iTNo,iMeasCutNo]=ITOR(iMeasState B_AND (B_NOT 'H100'))
  ELSE
    $TC_TPC1[iTNo]=ITOR(iMeasState B_AND (B_NOT 'B1000'))
  ENDIF
ENDIF
;
IF (NOT bCalledInTC)AND(bIsBroken)
  ;
  ;Werkzeug sperren
  TlData(iTNo,mcSetLockTl)
ENDIF
;
;Warten, bis Messeinrichtung in GndSt, Sollwert an PLC Loeschen
iErrCount=0
REPEAT
  bEnabled=(mcbBBKRetracted) $A_DBW[28]=0 $A_DBR[188]=grProbVal
  IF (NOT bEnabled)
    iErrCount=iErrCount+1
    IF (iErrCount>rcErrTimeDefault)
      ;
      ;BBK nicht in Grundstellung
      ;
      iAlarmNo=AL_BreakCtrlNoBasePos sAlarmParam=" {2}" bShowError=TRUE
      GOTOF HandleAlarm
    ENDIF
  ENDIF
UNTIL (bEnabled)

;===========
HandleAlarm:
;===========
;
;Fehlerausgabe
IF (bShowError)AND(iAlarmNo>0)
  ;
  MsgBox(<<iAlarmNo,"RESET",,sAlarmParam)
ELSE
  ;
  IF (NOT bCalledInTC)
    MsgBox("",sClear)
  ENDIF
ENDIF
;
RET
